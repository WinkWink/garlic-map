{"version":3,"file":"ReactInstantSearchCore.min.js","sources":["../../../../node_modules/react-fast-compare/index.js","../../src/core/utils.ts","../../src/core/context.ts","../../src/core/createConnector.tsx","../../src/core/highlight.js","../../src/core/version.js","../../src/core/indexUtils.js","../../src/connectors/connectConfigure.js","../../src/widgets/Configure.js","../../../../node_modules/algoliasearch-helper/src/functions/merge.js","../../../../node_modules/algoliasearch-helper/src/functions/defaultsPure.js","../../../../node_modules/algoliasearch-helper/src/functions/intersection.js","../../../../node_modules/algoliasearch-helper/src/functions/find.js","../../../../node_modules/algoliasearch-helper/src/functions/valToNumber.js","../../../../node_modules/algoliasearch-helper/src/functions/omit.js","../../../../node_modules/algoliasearch-helper/src/functions/objectHasKeys.js","../../../../node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","../../../../node_modules/algoliasearch-helper/src/SearchParameters/index.js","../../../../node_modules/algoliasearch-helper/src/utils/isValidUserToken.js","../../../../node_modules/algoliasearch-helper/src/functions/compact.js","../../../../node_modules/algoliasearch-helper/src/functions/findIndex.js","../../../../node_modules/algoliasearch-helper/src/functions/formatSort.js","../../../../node_modules/algoliasearch-helper/src/functions/orderBy.js","../../../../node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js","../../../../node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js","../../../../node_modules/algoliasearch-helper/src/SearchResults/index.js","../../../../node_modules/@algolia/events/events.js","../../../../node_modules/algoliasearch-helper/src/functions/inherits.js","../../../../node_modules/algoliasearch-helper/src/DerivedHelper/index.js","../../../../node_modules/algoliasearch-helper/src/requestBuilder.js","../../../../node_modules/algoliasearch-helper/src/version.js","../../../../node_modules/algoliasearch-helper/src/algoliasearch.helper.js","../../../../node_modules/algoliasearch-helper/index.js","../../src/connectors/connectConfigureRelatedItems.ts","../../../../node_modules/process-es6/browser.js","../../../../node_modules/rollup-plugin-node-globals/src/global.js","../../../../node_modules/react-is/cjs/react-is.production.min.js","../../../../node_modules/react-is/index.js","../../node_modules/prop-types/factoryWithThrowingShims.js","../../node_modules/prop-types/lib/ReactPropTypesSecret.js","../../node_modules/prop-types/index.js","../../src/widgets/ConfigureRelatedItems.tsx","../../src/connectors/connectDynamicWidgets.ts","../../src/widgets/DynamicWidgets.tsx","../../src/connectors/connectQueryRules.ts","../../src/widgets/QueryRuleContext.ts","../../src/widgets/Index.tsx","../../src/core/createInstantSearchManager.js","../../src/core/createWidgetsManager.ts","../../src/core/createStore.ts","../../src/core/metadata.ts","../../src/widgets/InstantSearch.tsx","../../src/connectors/connectAutoComplete.js","../../src/connectors/connectBreadcrumb.js","../../src/connectors/connectGeoSearch.js","../../src/connectors/connectHierarchicalMenu.js","../../src/connectors/connectCurrentRefinements.js","../../src/connectors/connectHighlight.js","../../src/connectors/connectHits.js","../../src/connectors/connectHitsPerPage.js","../../src/connectors/connectInfiniteHits.js","../../src/connectors/connectMenu.js","../../src/connectors/connectNumericMenu.js","../../src/connectors/connectPagination.js","../../src/connectors/connectPoweredBy.js","../../src/connectors/connectRange.js","../../src/connectors/connectRefinementList.js","../../src/connectors/connectScrollTo.js","../../src/connectors/connectSearchBox.js","../../src/connectors/connectRelevantSort.ts","../../src/connectors/connectSortBy.js","../../src/connectors/connectStateResults.js","../../src/connectors/connectStats.ts","../../src/connectors/connectToggleRefinement.js","../../src/connectors/connectHitInsights.ts","../../src/connectors/connectVoiceSearch.js","../../src/index.ts","../../src/core/translatable.js"],"sourcesContent":["/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function';\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React\n    for (i = length; i-- !== 0;) {\n      if (keys[i] === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","// From https://github.com/reactjs/react-redux/blob/master/src/utils/shallowEqual.js\nexport const shallowEqual = (objA: any, objB: any) => {\n  if (objA === objB) {\n    return true;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  const hasOwn = Object.prototype.hasOwnProperty;\n  for (let i = 0; i < keysA.length; i++) {\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const getDisplayName = (Component: any) =>\n  Component.displayName || Component.name || 'UnknownComponent';\n\nconst resolved = Promise.resolve();\nexport const defer = (f: any) => {\n  resolved.then(f);\n};\n\nconst isPlainObject = (value: unknown): value is object =>\n  typeof value === 'object' && value !== null && !Array.isArray(value);\n\nexport const removeEmptyKey = (obj: Record<string, any>) => {\n  Object.keys(obj).forEach((key) => {\n    const value = obj[key];\n\n    if (!isPlainObject(value)) {\n      return;\n    }\n\n    if (!objectHasKeys(value)) {\n      delete obj[key];\n    } else {\n      removeEmptyKey(value);\n    }\n  });\n\n  return obj;\n};\n\nexport const removeEmptyArraysFromObject = (obj: Record<string, any>) => {\n  Object.keys(obj).forEach((key) => {\n    const value = obj[key];\n\n    if (Array.isArray(value) && value.length === 0) {\n      delete obj[key];\n    }\n  });\n\n  return obj;\n};\n\nexport function addAbsolutePositions(\n  hits: any[],\n  hitsPerPage: number,\n  page: number\n) {\n  return hits.map((hit, index) => ({\n    ...hit,\n    __position: hitsPerPage * page + index + 1,\n  }));\n}\n\nexport function addQueryID(hits: any[], queryID: string) {\n  if (!queryID) {\n    return hits;\n  }\n  return hits.map((hit) => ({\n    ...hit,\n    __queryID: queryID,\n  }));\n}\n\nexport function find<TItem = any>(\n  array: TItem[],\n  comparator: (item: TItem) => boolean\n): TItem | undefined {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n  return undefined;\n}\n\nexport function objectHasKeys(object: object | undefined) {\n  return object && Object.keys(object).length > 0;\n}\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nexport function omit(\n  source: Record<string, any>,\n  excluded: string[]\n): Record<string, any> {\n  if (source === null || source === undefined) {\n    return {};\n  }\n  const target: Record<string, any> = {};\n  const sourceKeys = Object.keys(source);\n  for (let i = 0; i < sourceKeys.length; i++) {\n    const key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/**\n * Retrieve the value at a path of the object:\n *\n * @example\n * getPropertyByPath(\n *   { test: { this: { function: [{ now: { everyone: true } }] } } },\n *   'test.this.function[0].now.everyone'\n * ); // true\n *\n * getPropertyByPath(\n *   { test: { this: { function: [{ now: { everyone: true } }] } } },\n *   ['test', 'this', 'function', 0, 'now', 'everyone']\n * ); // true\n *\n * @param object Source object to query\n * @param path either an array of properties, or a string form of the properties, separated by .\n */\nexport const getPropertyByPath = (\n  object: Record<string, any>,\n  path: string[] | string\n): any =>\n  (Array.isArray(path)\n    ? path\n    : path.replace(/\\[(\\d+)]/g, '.$1').split('.')\n  ).reduce((current, key) => (current ? current[key] : undefined), object);\n\nexport function getObjectType(object: unknown): string {\n  return Object.prototype.toString.call(object).slice(8, -1);\n}\n\nexport function unescapeFacetValue(value: string): string {\n  return value.replace(/^\\\\-/, '-');\n}\n","import { createContext } from 'react';\nimport type { Store } from '../core/createStore';\nimport type InstantSearch from '../widgets/InstantSearch';\n\nexport type InstantSearchContext = {\n  onInternalStateUpdate: InstantSearch['onWidgetsInternalStateUpdate'];\n  createHrefForState: InstantSearch['createHrefForState'];\n  onSearchForFacetValues: InstantSearch['onSearchForFacetValues'];\n  onSearchStateChange: InstantSearch['onSearchStateChange'];\n  onSearchParameters: InstantSearch['onSearchParameters'];\n  store: Store;\n  widgetsManager: any;\n  mainTargetedIndex: string;\n};\n\nexport const instantSearchContext = createContext<InstantSearchContext>({\n  onInternalStateUpdate: () => undefined,\n  createHrefForState: () => '#',\n  onSearchForFacetValues: () => undefined,\n  onSearchStateChange: () => undefined,\n  onSearchParameters: () => undefined,\n  store: {} as Store,\n  widgetsManager: {},\n  mainTargetedIndex: '',\n});\n\nexport const {\n  Consumer: InstantSearchConsumer,\n  Provider: InstantSearchProvider,\n} = instantSearchContext;\n\nexport type IndexContext =\n  | {\n      targetedIndex: string;\n    }\n  | undefined;\n\nexport const { Consumer: IndexConsumer, Provider: IndexProvider } =\n  createContext<IndexContext>(undefined);\n","import type { ElementType } from 'react';\nimport React, { Component } from 'react';\nimport isEqual from 'react-fast-compare';\nimport { shallowEqual, getDisplayName, removeEmptyKey } from './utils';\nimport type { InstantSearchContext, IndexContext } from './context';\nimport { InstantSearchConsumer, IndexConsumer } from './context';\n\nexport type ConnectorDescription = {\n  displayName: string;\n  $$type: string;\n  /**\n   * a function to filter the local state\n   */\n  refine?: (...args: any[]) => any;\n  /**\n   * function transforming the local state to a SearchParameters\n   */\n  getSearchParameters?: (...args: any[]) => any;\n  /**\n   * metadata of the widget (for current refinements)\n   */\n  getMetadata?: (...args: any[]) => any;\n  /**\n   * hook after the state has changed\n   */\n  transitionState?: (...args: any[]) => any;\n  /**\n   * transform the state into props passed to the wrapped component.\n   * Receives (props, widgetStates, searchState, metadata) and returns the local state.\n   */\n  getProvidedProps: (...args: any[]) => any;\n  /**\n   * Receives props and return the id that will be used to identify the widget\n   */\n  getId?: (...args: any[]) => string;\n  /**\n   * hook when the widget will unmount. Receives (props, searchState) and return a cleaned state.\n   */\n  cleanUp?: (...args: any[]) => any;\n  searchForFacetValues?: (...args: any[]) => any;\n  shouldComponentUpdate?: (...args: any[]) => boolean;\n  /**\n   * PropTypes forwarded to the wrapped component.\n   */\n  propTypes?: Record<string, any>; // I can't find a definition for a propTypes object\n  defaultProps?: Record<string, any>;\n};\n\nexport type AdditionalWidgetProperties = {\n  $$widgetType?: string;\n};\n\ntype ConnectorProps = {\n  contextValue: InstantSearchContext;\n  indexContextValue?: IndexContext;\n};\n\nexport type ConnectedProps<TWidgetProps> = TWidgetProps & ConnectorProps;\n\ntype ConnectorState = {\n  providedProps: {};\n};\n\n/**\n * Connectors are the HOC used to transform React components\n * into InstantSearch widgets.\n * In order to simplify the construction of such connectors\n * `createConnector` takes a description and transform it into\n * a connector.\n * @param {ConnectorDescription} connectorDesc the description of the connector\n * @return {Connector} a function that wraps a component into\n * an instantsearch connected one.\n */\nexport function createConnectorWithoutContext(\n  connectorDesc: ConnectorDescription\n) {\n  if (!connectorDesc.displayName) {\n    throw new Error(\n      '`createConnector` requires you to provide a `displayName` property.'\n    );\n  }\n\n  const isWidget =\n    typeof connectorDesc.getSearchParameters === 'function' ||\n    typeof connectorDesc.getMetadata === 'function' ||\n    typeof connectorDesc.transitionState === 'function';\n\n  return (\n    Composed: ElementType,\n    additionalWidgetProperties: AdditionalWidgetProperties = {}\n  ) => {\n    class Connector extends Component<ConnectorProps, ConnectorState> {\n      static displayName = `${connectorDesc.displayName}(${getDisplayName(\n        Composed\n      )})`;\n      static $$type = connectorDesc.$$type;\n      static $$widgetType = additionalWidgetProperties.$$widgetType;\n      static propTypes = connectorDesc.propTypes;\n      static defaultProps = connectorDesc.defaultProps;\n      static _connectorDesc = connectorDesc;\n\n      unsubscribe?: () => void;\n      unregisterWidget?: () => void;\n\n      cleanupTimerRef: ReturnType<typeof setTimeout> | null = null;\n      isUnmounting = false;\n\n      state: ConnectorState = {\n        providedProps: this.getProvidedProps(this.props),\n      };\n\n      constructor(props: ConnectorProps) {\n        super(props);\n\n        if (connectorDesc.getSearchParameters) {\n          this.props.contextValue.onSearchParameters(\n            connectorDesc.getSearchParameters.bind(this),\n            {\n              ais: this.props.contextValue,\n              multiIndexContext: this.props.indexContextValue,\n            },\n            this.props,\n            connectorDesc.getMetadata && connectorDesc.getMetadata.bind(this),\n            connectorDesc.displayName\n          );\n        }\n      }\n\n      componentDidMount() {\n        if (this.cleanupTimerRef) {\n          clearTimeout(this.cleanupTimerRef);\n          this.cleanupTimerRef = null;\n        }\n\n        this.unsubscribe = this.props.contextValue.store.subscribe(() => {\n          if (!this.isUnmounting) {\n            this.setState({\n              providedProps: this.getProvidedProps(this.props),\n            });\n          }\n        });\n\n        if (isWidget) {\n          this.unregisterWidget =\n            this.props.contextValue.widgetsManager.registerWidget(this);\n        }\n      }\n\n      shouldComponentUpdate(nextProps: any, nextState: any) {\n        if (typeof connectorDesc.shouldComponentUpdate === 'function') {\n          return connectorDesc.shouldComponentUpdate.call(\n            this,\n            this.props,\n            nextProps,\n            this.state,\n            nextState\n          );\n        }\n\n        const propsEqual = shallowEqual(this.props, nextProps);\n\n        if (\n          this.state.providedProps === null ||\n          nextState.providedProps === null\n        ) {\n          if (this.state.providedProps === nextState.providedProps) {\n            return !propsEqual;\n          }\n          return true;\n        }\n\n        return (\n          !propsEqual ||\n          !shallowEqual(this.state.providedProps, nextState.providedProps)\n        );\n      }\n\n      componentDidUpdate(prevProps: any) {\n        if (!isEqual(prevProps, this.props)) {\n          this.setState({\n            providedProps: this.getProvidedProps(this.props),\n          });\n\n          if (isWidget) {\n            this.props.contextValue.widgetsManager.update();\n\n            if (typeof connectorDesc.transitionState === 'function') {\n              this.props.contextValue.onSearchStateChange(\n                connectorDesc.transitionState.call(\n                  this,\n                  this.props,\n                  this.props.contextValue.store.getState().widgets,\n                  this.props.contextValue.store.getState().widgets\n                )\n              );\n            }\n          }\n        }\n      }\n\n      componentWillUnmount() {\n        this.cleanupTimerRef = setTimeout(() => {\n          this.isUnmounting = true;\n\n          if (this.unsubscribe) {\n            this.unsubscribe();\n          }\n\n          if (this.unregisterWidget) {\n            this.unregisterWidget();\n\n            if (typeof connectorDesc.cleanUp === 'function') {\n              const nextState = connectorDesc.cleanUp.call(\n                this,\n                this.props,\n                this.props.contextValue.store.getState().widgets\n              );\n\n              this.props.contextValue.store.setState({\n                ...this.props.contextValue.store.getState(),\n                widgets: nextState,\n              });\n\n              this.props.contextValue.onSearchStateChange(\n                removeEmptyKey(nextState)\n              );\n            }\n          }\n        });\n      }\n\n      getProvidedProps(props: any) {\n        const {\n          widgets,\n          results,\n          resultsFacetValues,\n          searching,\n          searchingForFacetValues,\n          isSearchStalled,\n          metadata,\n          error,\n        } = this.props.contextValue.store.getState();\n\n        const searchResults = {\n          results,\n          searching,\n          searchingForFacetValues,\n          isSearchStalled,\n          error,\n        };\n\n        return connectorDesc.getProvidedProps.call(\n          this,\n          props,\n          widgets,\n          searchResults,\n          metadata,\n          // @MAJOR: move this attribute on the `searchResults` it doesn't\n          // makes sense to have it into a separate argument. The search\n          // flags are on the object why not the results?\n          resultsFacetValues\n        );\n      }\n\n      getSearchParameters(searchParameters: any) {\n        if (typeof connectorDesc.getSearchParameters === 'function') {\n          return connectorDesc.getSearchParameters.call(\n            this,\n            searchParameters,\n            this.props,\n            this.props.contextValue.store.getState().widgets\n          );\n        }\n\n        return null;\n      }\n\n      getMetadata(nextWidgetsState: any) {\n        if (typeof connectorDesc.getMetadata === 'function') {\n          return connectorDesc.getMetadata.call(\n            this,\n            this.props,\n            nextWidgetsState\n          );\n        }\n\n        return {};\n      }\n\n      transitionState(prevWidgetsState: any, nextWidgetsState: any) {\n        if (typeof connectorDesc.transitionState === 'function') {\n          return connectorDesc.transitionState.call(\n            this,\n            this.props,\n            prevWidgetsState,\n            nextWidgetsState\n          );\n        }\n\n        return nextWidgetsState;\n      }\n\n      refine = (...args: any[]) => {\n        this.props.contextValue.onInternalStateUpdate(\n          // refine will always be defined here because the prop is only given conditionally\n          connectorDesc.refine!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n      };\n\n      createURL = (...args: any[]) =>\n        this.props.contextValue.createHrefForState(\n          // refine will always be defined here because the prop is only given conditionally\n          connectorDesc.refine!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n\n      searchForFacetValues = (...args: any[]) => {\n        this.props.contextValue.onSearchForFacetValues(\n          // searchForFacetValues will always be defined here because the prop is only given conditionally\n          connectorDesc.searchForFacetValues!.call(\n            this,\n            this.props,\n            this.props.contextValue.store.getState().widgets,\n            ...args\n          )\n        );\n      };\n\n      render() {\n        const { contextValue, ...props } = this.props;\n        const { providedProps } = this.state;\n\n        if (providedProps === null) {\n          return null;\n        }\n\n        const refineProps =\n          typeof connectorDesc.refine === 'function'\n            ? { refine: this.refine, createURL: this.createURL }\n            : {};\n\n        const searchForFacetValuesProps =\n          typeof connectorDesc.searchForFacetValues === 'function'\n            ? { searchForItems: this.searchForFacetValues }\n            : {};\n\n        return (\n          <Composed\n            {...props}\n            {...providedProps}\n            {...refineProps}\n            {...searchForFacetValuesProps}\n          />\n        );\n      }\n    }\n\n    return Connector;\n  };\n}\n\nconst createConnectorWithContext =\n  (connectorDesc: ConnectorDescription) =>\n  (\n    Composed: ElementType,\n    additionalWidgetProperties?: AdditionalWidgetProperties\n  ) => {\n    const Connector = createConnectorWithoutContext(connectorDesc)(\n      Composed,\n      additionalWidgetProperties\n    );\n\n    const ConnectorWrapper: React.FC<any> = (props) => (\n      <InstantSearchConsumer>\n        {(contextValue) => (\n          <IndexConsumer>\n            {(indexContextValue) => (\n              <Connector\n                contextValue={contextValue}\n                indexContextValue={indexContextValue}\n                {...props}\n              />\n            )}\n          </IndexConsumer>\n        )}\n      </InstantSearchConsumer>\n    );\n\n    return ConnectorWrapper;\n  };\n\nexport default createConnectorWithContext;\n","import { getPropertyByPath } from './utils';\n\nexport const HIGHLIGHT_TAGS = {\n  highlightPreTag: `<ais-highlight-0000000000>`,\n  highlightPostTag: `</ais-highlight-0000000000>`,\n};\n\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nfunction parseHighlightedAttribute({ preTag, postTag, highlightedValue = '' }) {\n  const splitByPreTag = highlightedValue.split(preTag);\n  const firstValue = splitByPreTag.shift();\n  const elements =\n    firstValue === '' ? [] : [{ value: firstValue, isHighlighted: false }];\n\n  if (postTag === preTag) {\n    let isHighlighted = true;\n    splitByPreTag.forEach((split) => {\n      elements.push({ value: split, isHighlighted });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach((split) => {\n      const splitByPostTag = split.split(postTag);\n\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true,\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          value: splitByPostTag[1],\n          isHighlighted: false,\n        });\n      }\n    });\n  }\n\n  return elements;\n}\n\n/**\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highlightPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attribute - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nexport function parseAlgoliaHit({\n  preTag = '<em>',\n  postTag = '</em>',\n  highlightProperty,\n  attribute,\n  hit,\n}) {\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n\n  const highlightObject =\n    getPropertyByPath(hit[highlightProperty], attribute) || {};\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map((item) =>\n      parseHighlightedAttribute({\n        preTag,\n        postTag,\n        highlightedValue: item.value,\n      })\n    );\n  }\n\n  return parseHighlightedAttribute({\n    preTag,\n    postTag,\n    highlightedValue: highlightObject.value,\n  });\n}\n","export default '6.39.1';\n","import { omit } from './utils';\n\nexport function getIndexId(context) {\n  return hasMultipleIndices(context)\n    ? context.multiIndexContext.targetedIndex\n    : context.ais.mainTargetedIndex;\n}\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @returns {import('algoliasearch-helper').SearchResults} results\n */\nexport function getResults(searchResults, context) {\n  if (searchResults.results) {\n    if (searchResults.results.hits) {\n      return searchResults.results;\n    }\n\n    const indexId = getIndexId(context);\n    if (searchResults.results[indexId]) {\n      return searchResults.results[indexId];\n    }\n  }\n\n  return null;\n}\n\nexport function hasMultipleIndices(context) {\n  return context && context.multiIndexContext;\n}\n\nexport function refineValue(\n  searchState,\n  nextRefinement,\n  context,\n  resetPage,\n  namespace\n) {\n  if (hasMultipleIndices(context)) {\n    const indexId = getIndexId(context);\n    return namespace\n      ? refineMultiIndexWithNamespace(\n          searchState,\n          nextRefinement,\n          indexId,\n          resetPage,\n          namespace\n        )\n      : refineMultiIndex(searchState, nextRefinement, indexId, resetPage);\n  } else {\n    // When we have a multi index page with shared widgets we should also\n    // reset their page to 1 if the resetPage is provided. Otherwise the\n    // indices will always be reset\n    // see: https://github.com/algolia/react-instantsearch/issues/310\n    // see: https://github.com/algolia/react-instantsearch/issues/637\n    if (searchState.indices && resetPage) {\n      Object.keys(searchState.indices).forEach((targetedIndex) => {\n        searchState = refineValue(\n          searchState,\n          { page: 1 },\n          { multiIndexContext: { targetedIndex } },\n          true,\n          namespace\n        );\n      });\n    }\n    return namespace\n      ? refineSingleIndexWithNamespace(\n          searchState,\n          nextRefinement,\n          resetPage,\n          namespace\n        )\n      : refineSingleIndex(searchState, nextRefinement, resetPage);\n  }\n}\n\nfunction refineMultiIndex(searchState, nextRefinement, indexId, resetPage) {\n  const page = resetPage ? { page: 1 } : undefined;\n  const state =\n    searchState.indices && searchState.indices[indexId]\n      ? {\n          ...searchState.indices,\n          [indexId]: {\n            ...searchState.indices[indexId],\n            ...nextRefinement,\n            ...page,\n          },\n        }\n      : {\n          ...searchState.indices,\n          [indexId]: {\n            ...nextRefinement,\n            ...page,\n          },\n        };\n\n  return {\n    ...searchState,\n    indices: state,\n  };\n}\n\nfunction refineSingleIndex(searchState, nextRefinement, resetPage) {\n  const page = resetPage ? { page: 1 } : undefined;\n  return { ...searchState, ...nextRefinement, ...page };\n}\n\nfunction refineMultiIndexWithNamespace(\n  searchState,\n  nextRefinement,\n  indexId,\n  resetPage,\n  namespace\n) {\n  const page = resetPage ? { page: 1 } : undefined;\n  const state =\n    searchState.indices && searchState.indices[indexId]\n      ? {\n          ...searchState.indices,\n          [indexId]: {\n            ...searchState.indices[indexId],\n            [namespace]: {\n              ...searchState.indices[indexId][namespace],\n              ...nextRefinement,\n            },\n            page: 1,\n          },\n        }\n      : {\n          ...searchState.indices,\n          [indexId]: {\n            [namespace]: nextRefinement,\n            ...page,\n          },\n        };\n\n  return {\n    ...searchState,\n    indices: state,\n  };\n}\n\nfunction refineSingleIndexWithNamespace(\n  searchState,\n  nextRefinement,\n  resetPage,\n  namespace\n) {\n  const page = resetPage ? { page: 1 } : undefined;\n  return {\n    ...searchState,\n    [namespace]: { ...searchState[namespace], ...nextRefinement },\n    ...page,\n  };\n}\n\nfunction getNamespaceAndAttributeName(id) {\n  const parts = id.match(/^([^.]*)\\.(.*)/);\n  const namespace = parts && parts[1];\n  const attributeName = parts && parts[2];\n\n  return { namespace, attributeName };\n}\n\nfunction hasRefinements({\n  multiIndex,\n  indexId,\n  namespace,\n  attributeName,\n  id,\n  searchState,\n}) {\n  if (multiIndex && namespace) {\n    return (\n      searchState.indices &&\n      searchState.indices[indexId] &&\n      searchState.indices[indexId][namespace] &&\n      Object.hasOwnProperty.call(\n        searchState.indices[indexId][namespace],\n        attributeName\n      )\n    );\n  }\n\n  if (multiIndex) {\n    return (\n      searchState.indices &&\n      searchState.indices[indexId] &&\n      Object.hasOwnProperty.call(searchState.indices[indexId], id)\n    );\n  }\n\n  if (namespace) {\n    return (\n      searchState[namespace] &&\n      Object.hasOwnProperty.call(searchState[namespace], attributeName)\n    );\n  }\n\n  return Object.hasOwnProperty.call(searchState, id);\n}\n\nfunction getRefinements({\n  multiIndex,\n  indexId,\n  namespace,\n  attributeName,\n  id,\n  searchState,\n}) {\n  if (multiIndex && namespace) {\n    return searchState.indices[indexId][namespace][attributeName];\n  }\n  if (multiIndex) {\n    return searchState.indices[indexId][id];\n  }\n  if (namespace) {\n    return searchState[namespace][attributeName];\n  }\n\n  return searchState[id];\n}\n\nexport function getCurrentRefinementValue(\n  props,\n  searchState,\n  context,\n  id,\n  defaultValue\n) {\n  const indexId = getIndexId(context);\n  const { namespace, attributeName } = getNamespaceAndAttributeName(id);\n  const multiIndex = hasMultipleIndices(context);\n  const args = {\n    multiIndex,\n    indexId,\n    namespace,\n    attributeName,\n    id,\n    searchState,\n  };\n  const hasRefinementsValue = hasRefinements(args);\n\n  if (hasRefinementsValue) {\n    return getRefinements(args);\n  }\n\n  if (props.defaultRefinement) {\n    return props.defaultRefinement;\n  }\n\n  return defaultValue;\n}\n\nexport function cleanUpValue(searchState, context, id) {\n  const indexId = getIndexId(context);\n  const { namespace, attributeName } = getNamespaceAndAttributeName(id);\n\n  if (hasMultipleIndices(context) && Boolean(searchState.indices)) {\n    return cleanUpValueWithMultiIndex({\n      attribute: attributeName,\n      searchState,\n      indexId,\n      id,\n      namespace,\n    });\n  }\n\n  return cleanUpValueWithSingleIndex({\n    attribute: attributeName,\n    searchState,\n    id,\n    namespace,\n  });\n}\n\nfunction cleanUpValueWithSingleIndex({\n  searchState,\n  id,\n  namespace,\n  attribute,\n}) {\n  if (namespace) {\n    return {\n      ...searchState,\n      [namespace]: omit(searchState[namespace], [attribute]),\n    };\n  }\n\n  return omit(searchState, [id]);\n}\n\nfunction cleanUpValueWithMultiIndex({\n  searchState,\n  indexId,\n  id,\n  namespace,\n  attribute,\n}) {\n  const indexSearchState = searchState.indices[indexId];\n\n  if (namespace && indexSearchState) {\n    return {\n      ...searchState,\n      indices: {\n        ...searchState.indices,\n        [indexId]: {\n          ...indexSearchState,\n          [namespace]: omit(indexSearchState[namespace], [attribute]),\n        },\n      },\n    };\n  }\n\n  if (indexSearchState) {\n    return {\n      ...searchState,\n      indices: {\n        ...searchState.indices,\n        [indexId]: omit(indexSearchState, [id]),\n      },\n    };\n  }\n\n  return searchState;\n}\n","import { omit } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  refineValue,\n  getIndexId,\n  hasMultipleIndices,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'configure';\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigure',\n  $$type: 'ais.configure',\n  getProvidedProps() {\n    return {};\n  },\n  getSearchParameters(searchParameters, props) {\n    const { children, contextValue, indexContextValue, ...items } = props;\n    return searchParameters.setQueryParameters(items);\n  },\n  transitionState(props, prevSearchState, nextSearchState) {\n    const id = getId();\n    const { children, contextValue, indexContextValue, ...items } = props;\n    const propKeys = Object.keys(props);\n    const nonPresentKeys = this._props\n      ? Object.keys(this._props).filter((prop) => propKeys.indexOf(prop) === -1)\n      : [];\n    this._props = props;\n    const nextValue = {\n      [id]: { ...omit(nextSearchState[id], nonPresentKeys), ...items },\n    };\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n  cleanUp(props, searchState) {\n    const id = getId();\n    const indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const subState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[indexId]\n        : searchState;\n\n    const configureKeys =\n      subState && subState[id] ? Object.keys(subState[id]) : [];\n\n    const configureState = configureKeys.reduce((acc, item) => {\n      if (!props[item]) {\n        acc[item] = subState[id][item];\n      }\n      return acc;\n    }, {});\n\n    const nextValue = { [id]: configureState };\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","import connectConfigure from '../connectors/connectConfigure';\n\n/**\n * Configure is a widget that lets you provide raw search parameters\n * to the Algolia API.\n *\n * Any of the props added to this widget will be forwarded to Algolia. For more information\n * on the different parameters that can be set, have a look at the\n * [reference](https://www.algolia.com/doc/api-client/javascript/search#search-parameters).\n *\n * This widget can be used either with react-dom and react-native. It will not render anything\n * on screen, only configure some parameters.\n *\n * Read more in the [Search parameters](guide/Search_parameters.html) guide.\n * @name Configure\n * @kind widget\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Configure, Hits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <Hits />\n *   </InstantSearch>\n * );\n */\n\nexport default connectConfigure(\n  function Configure() {\n    return null;\n  },\n  { $$widgetType: 'ais.configure' }\n);\n","'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__' ||\n      key === 'constructor'\n    ) {\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\n\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n","'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function(acc, source) {\n    Object.keys(Object(source)).forEach(function(key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n","'use strict';\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function(value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n","'use strict';\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n};\n","'use strict';\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error('The value should be a number, a parsable string or an array of those.');\n}\n\nmodule.exports = valToNumber;\n","'use strict';\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n","'use strict';\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n","'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute] ?\n      [valueAsString] :\n      refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure({}, mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(refinementList, attribute, value) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function(v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function(v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n    if (value === undefined) throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function(value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n        memo[key] = facetList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean}\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements = !!refinementList[attribute] &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  }\n};\n\nmodule.exports = lib;\n","'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar intersection = require('../functions/intersection');\nvar find = require('../functions/find');\nvar valToNumber = require('../functions/valToNumber');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function(el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function(currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n\n  var self = this;\n  Object.keys(params).forEach(function(paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function(partialState) {\n  // Do not reparse numbers in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity'\n  ];\n\n  numberKeys.forEach(function(k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function(value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function(attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function(v) {\n          if (Array.isArray(v)) {\n            return v.map(function(vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge({}, partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function(facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function(currentState, parameters) {\n  var params = parameters || {};\n\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n      'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n      'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n      ' is probably an error, if this is really what you want, you have to first' +\n      ' clear the numeric filters.');\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters}\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      )\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters}\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters}\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters}\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters}\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters}\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters}\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters}\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters}\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters}\n   * @example\n   * // for price = 50 or 40\n   * searchparameter.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * searchparameter.addNumericRefinement('size', '=', 38);\n   * searchparameter.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function(attribute, operator, v) {\n    var value = valToNumber(v);\n\n    if (this.isNumericRefined(attribute, operator, value)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(value);\n    } else {\n      mod[attribute][operator] = [value];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function(facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function(facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters}\n   */\n  removeNumericRefinement: function(attribute, operator, paramValue) {\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function(value, key) {\n        return key === attribute;\n      })\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function(facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function(attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>}\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n\n        operators = operators || {};\n        Object.keys(operators).forEach(function(operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function(value) {\n            var predicateResult = attribute({val: value, op: operator}, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n          operatorList[operator] = outValues;\n        });\n\n        memo[key] = operatorList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters}\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters}\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters}\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters}\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters}\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {\n        return f.name !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters}\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters}\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function(t) {\n        return t !== tag;\n      })\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error('Cannot refine the undeclared facet ' + facet +\n      '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n\n    var mod = {};\n\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 && (\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0] === value ||\n      // remove a parent refinement of the current refinement:\n      //  - refinement was 'beer > IPA > Flying dog'\n      //  - call is toggleRefine('beer > IPA')\n      //  - refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0\n    );\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function(facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function(facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters}\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isDisjunctiveFacet: function(facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean}\n   */\n  isHierarchicalFacet: function(facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isConjunctiveFacet: function(facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean}\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function(facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets());\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function(facet) { return facet.name; }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    );\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]}\n   */\n  getUnrefinedDisjunctiveFacets: function() {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function(f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements'\n  ],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    var self = this;\n    Object.keys(this).forEach(function(paramName) {\n      var paramValue = self[paramName];\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function(acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(\n      function(previous, key) {\n        var isPreviousValueDefined = previous[key] !== undefined;\n        var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n        if (isPreviousValueDefined && !isNextValueDefined) {\n          return omit(previous, [key]);\n        }\n\n        if (isNextValueDefined) {\n          previous[key] = nextWithNumbers[key];\n        }\n\n        return previous;\n      },\n      previousPlainObject\n    );\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function() {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function(hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function(hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function(hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function(hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function(hierarchicalFacetName) {\n    return find(\n      this.hierarchicalFacets,\n      function(f) {\n        return f.name === hierarchicalFacetName;\n      }\n    );\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function(facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function(part) {\n      return part.trim();\n    });\n  },\n\n  toString: function() {\n    return JSON.stringify(this, null, 2);\n  }\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n","'use strict';\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n","'use strict';\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n","'use strict';\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n","'use strict';\n\nvar find = require('./find');\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function(sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(defaultInstructions, function(\n        defaultInstruction\n      ) {\n        return defaultInstruction[0] === sortInstruction[0];\n      });\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n","'use strict';\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function(value, index) {\n    return {\n      criteria: iteratees.map(function(iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function(res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n","'use strict';\n\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns any\n */\nfunction escapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return String(value).replace(/^-/, '\\\\-');\n}\n\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns any\n */\nfunction unescapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return value.replace(/^\\\\-/, '-');\n}\n\nmodule.exports = {\n  escapeFacetValue: escapeFacetValue,\n  unescapeFacetValue: unescapeFacetValue\n};\n","'use strict';\n\nmodule.exports = generateTrees;\n\nvar orderBy = require('../functions/orderBy');\nvar find = require('../functions/find');\nvar prepareHierarchicalFacetSortBy = require('../functions/formatSort');\nvar fv = require('../functions/escapeFacetValue');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator = state._getHierarchicalFacetSeparator(\n      hierarchicalFacet\n    );\n    var hierarchicalRootPath = state._getHierarchicalRootPath(\n      hierarchicalFacet\n    );\n    var hierarchicalShowParentLevel = state._getHierarchicalShowParentLevel(\n      hierarchicalFacet\n    );\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function(facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      escapedValue: null,\n      exhaustive: rootExhaustive,\n      data: null\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function(subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function(facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function(tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function(tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            unescapeFacetValue(currentRefinement),\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    escapedValue: escapeFacetValue(facetValue),\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null\n  };\n}\n","'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar orderBy = require('../functions/orderBy');\nvar compact = require('../functions/compact');\nvar find = require('../functions/find');\nvar findIndex = require('../functions/findIndex');\nvar formatSort = require('../functions/formatSort');\nvar fv = require('../functions/escapeFacetValue');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * @param {string[]} attributes\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function(val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets\n * @param {string} hierarchicalAttributeName\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(hierarchicalFacets, function facetKeyMatchesAttribute(\n    hierarchicalFacet\n  ) {\n    var facetNames = hierarchicalFacet.attributes || [];\n    return facetNames.indexOf(hierarchicalAttributeName) > -1;\n  });\n}\n\n/*eslint-disable */\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\n/*eslint-enable */\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0];\n\n  this._rawResults = results;\n\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function(key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  Object.keys(options || {}).forEach(function(key) {\n    self[key] = options[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   *  - `value` : the value of the facet highlighted (html)\n   *  - `matchLevel`: full, partial or none depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @member {number}\n   */\n  this.processingTimeMS = results.reduce(function(sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {\n    return [];\n  });\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function(facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function(f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function(disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function(dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function(f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n          return f.attribute === dfacet;\n        });\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = merge(\n          {},\n          self.hierarchicalFacets[position][attributeIndex].data,\n          facetResults\n        );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: defaultsPure({}, facetResults, dataFromMainRequest),\n          exhaustive: result.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (!self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue(refinementValue)) > -1) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some parent level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {\n      return;\n    }\n\n    results.slice(nextDisjunctiveResult).forEach(function(result) {\n      var facets = result && result.facets\n        ? result.facets\n        : {};\n\n      Object.keys(facets).forEach(function(dfacet) {\n        var facetResults = facets[dfacet];\n        var position = findIndex(state.hierarchicalFacets, function(f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n          return f.attribute === dfacet;\n        });\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n        // then the disjunctive values will be `beers` (count: 100),\n        // but we do not want to display\n        //   | beers (100)\n        //     > IPA (5)\n        // We want\n        //   | beers (5)\n        //     > IPA (5)\n        var defaultData = {};\n\n        if (currentRefinement.length > 0) {\n          var root = currentRefinement[0].split(separator)[0];\n          defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n          defaultData,\n          facetResults,\n          self.hierarchicalFacets[position][attributeIndex].data\n        );\n      });\n\n      nextDisjunctiveResult++;\n    });\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function(facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainSubResponse.facets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount\n    };\n    excludes.forEach(function(facetValue) {\n      self.facets[position] = self.facets[position] || {name: facetName};\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function(name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate);\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function(name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name)\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function(name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n    if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n\n    var hierarchicalFacet = results._state.getHierarchicalFacetByName(attribute);\n    var currentRefinementSplit = unescapeFacetValue(\n      results._state.getHierarchicalRefinement(attribute)[0] || ''\n    ).split(results._state._getHierarchicalFacetSeparator(hierarchicalFacet));\n    currentRefinementSplit.unshift(attribute);\n\n    setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n\n    return hierarchicalFacetValues;\n  }\n}\n\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinementSplit array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n */\nfunction setIsRefined(item, currentRefinement, depth) {\n  item.isRefined = item.name === currentRefinement[depth];\n  if (item.data) {\n    item.data.forEach(function(child) {\n      setIsRefined(child, currentRefinement, depth + 1);\n    });\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function(childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({data: sortedChildren}, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array}\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n\n  var order = facetOrdering.order || [];\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function(acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function(item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    if (reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function(facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [['path', 'name'], ['asc', 'asc']];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering=}\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function(attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure({}, opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy)\n  });\n\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(function(data, facetName) {\n    if (options.facetOrdering) {\n      var facetOrdering = getFacetOrdering(results, facetName);\n      if (Boolean(facetOrdering)) {\n        return sortViaFacetOrdering(data, facetOrdering);\n      }\n    }\n\n    if (Array.isArray(options.sortBy)) {\n      var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n      return orderBy(data, order[0], order[1]);\n    } else if (typeof options.sortBy === 'function') {\n      return vanillaSortFn(options.sortBy, data);\n    }\n    throw new Error(\n      'options.sortBy is optional but if defined it must be ' +\n        'either an array of string (predicates) or a sorting function'\n    );\n  }, facetValues, attributes);\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function(attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function(facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function() {\n  var state = this._state;\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function(attributeName) {\n    state.facetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'facet', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function(attributeName) {\n    state.facetsExcludes[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'exclude', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'disjunctive', attributeName, name, results.disjunctiveFacets));\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));\n    });\n  });\n\n\n  Object.keys(state.numericRefinements).forEach(function(attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function(operator) {\n      operators[operator].forEach(function(value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function(name) {\n    res.push({type: 'tag', attributeName: '_tags', name: name});\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {*} state\n * @param {*} type\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function(f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\n/**\n * @param {*} state\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function(facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function(intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet && find(intermediateFacet.data, function(f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\nmodule.exports = SearchResults;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","'use strict';\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nmodule.exports = inherits;\n","'use strict';\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('../functions/inherits');\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n */\nfunction DerivedHelper(mainHelper, fn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.lastResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function() {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function(parameters) {\n  return this.fn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n","'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort(function(a, b) {\n      return a.localeCompare(b);\n    })\n    .reduce(function(acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(\n          function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value: level === 0\n                ? segment\n                : [map[map.length - 1].value, segment].join(separator)\n            });\n          }\n        , []);\n\n        filtersMap.forEach(function(filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function(attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n\n          var filteredFacetFilters = (params.facetFilters || []).reduce(function(acc, facetFilter) {\n            if (Array.isArray(facetFilter)) {\n              var filtered = facetFilter.filter(function(filterValue) {\n                return !hasHierarchicalFacetFilter(filterValue);\n              });\n\n              if (filtered.length > 0) {\n                acc.push(filtered);\n              }\n            }\n\n            if (typeof facetFilter === 'string' && !hasHierarchicalFacetFilter(facetFilter)) {\n              acc.push(facetFilter);\n            }\n\n            return acc;\n          }, []);\n\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(parent.attribute + ':' + parent.value);\n          } else {\n            params.facetFilters = filteredFacetFilters.length > 0 ? filteredFacetFilters : undefined;\n          }\n\n          queries.push({indexName: index, params: params});\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets.indexOf('*') > -1 ? ['*'] : facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function(attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function(value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function(facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function(facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n\n      facetValues.forEach(function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(merge(\n      {},\n      requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n      searchForFacetSearchParameters\n    ));\n  }\n};\n\nmodule.exports = requestBuilder;\n","'use strict';\n\nmodule.exports = '3.11.3';\n","'use strict';\n\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar DerivedHelper = require('./DerivedHelper');\nvar requestBuilder = require('./requestBuilder');\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('./functions/inherits');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar merge = require('./functions/merge');\n\nvar version = require('./version');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function() {\n  this._search({onlyWithDerivedHelpers: false});\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n  this._search({onlyWithDerivedHelpers: true});\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function() {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function(err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n /**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */\nAlgoliaSearchHelper.prototype.findAnswers = function(options) {\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText' // FIXME remove this line once the engine is fixed.\n      ])\n    }\n  );\n\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n\n  this._currentNbQueries++;\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      {indexName: state.index, params: algoliaQuery}\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery\n        }\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n    content = Array.isArray(content) ? content[0] : content;\n\n    content.facetHits.forEach(function(f) {\n      f.escapedValue = escapeFacetValue(f.value);\n      f.isRefined = isDisjunctive\n        ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n        : state.isFacetRefined(facet, f.escapedValue);\n    });\n\n    return content;\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function(q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function() {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function() {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function() {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function() {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function() {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function() {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function() {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function(name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function(newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype.hasTag = function(tag) {\n  return this.state.isTagRefined(tag);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function() {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function() {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function() {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n\n    disjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function(operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function(options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= (queryId - this._lastQueryIdReceived);\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n\n  states.forEach(function(s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n\n    helper.emit('result', {\n      results: formattedResponse,\n      state: state\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n  return query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0;\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n  return this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function(event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.clearCache = function() {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.setClient = function(newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\nAlgoliaSearchHelper.prototype.getClient = function() {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\nAlgoliaSearchHelper.prototype.derive = function(fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n","'use strict';\n\nvar AlgoliaSearchHelper = require('./src/algoliasearch.helper');\n\nvar SearchParameters = require('./src/SearchParameters');\nvar SearchResults = require('./src/SearchResults');\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @return {AlgoliaSearchHelper}\n */\nfunction algoliasearchHelper(client, index, opts) {\n  return new AlgoliaSearchHelper(client, index, opts);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = require('./src/version.js');\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\nmodule.exports = algoliasearchHelper;\n","import type {\n  PlainSearchParameters,\n  SearchParameters,\n} from 'algoliasearch-helper';\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport {\n  omit,\n  getObjectType,\n  getPropertyByPath,\n  removeEmptyKey,\n  removeEmptyArraysFromObject,\n} from '../core/utils';\nimport {\n  refineValue,\n  getIndexId,\n  hasMultipleIndices,\n  // @ts-ignore\n} from '../core/indexUtils';\n\ntype Hit = any;\n\nexport type MatchingPatterns = {\n  [attribute: string]: {\n    /**\n     * The score of the optional filter.\n     *\n     * @see https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/in-depth/optional-filters/\n     */\n    score: number;\n  };\n};\n\ninterface ConfigureRelatedItemsProps {\n  /**\n   * The reference hit to extract the filters from.\n   */\n  hit: Hit;\n  /**\n   * The schema to create the optional filters.\n   * Each key represents an attribute from the hit.\n   */\n  matchingPatterns: MatchingPatterns;\n  /**\n   * Function to transform the generated search parameters.\n   */\n  transformSearchParameters?(\n    searchParameters: SearchParameters\n  ): PlainSearchParameters;\n}\n\nfunction createOptionalFilter({\n  attributeName,\n  attributeValue,\n  attributeScore,\n}: {\n  attributeName: string;\n  attributeValue: string;\n  attributeScore: number;\n}) {\n  return `${attributeName}:${attributeValue}<score=${attributeScore || 1}>`;\n}\n\nconst defaultProps: Partial<ConfigureRelatedItemsProps> = {\n  transformSearchParameters: (x) => ({ ...x }),\n};\n\nfunction getId(): string {\n  // We store the search state of this widget in `configure`.\n  return 'configure';\n}\n\ntype InternalConfigureRelatedItemsProps = ConfigureRelatedItemsProps &\n  Required<typeof defaultProps>;\n\nfunction getSearchParametersFromProps(\n  props: ConnectedProps<InternalConfigureRelatedItemsProps>\n): PlainSearchParameters {\n  const optionalFilters = Object.keys(props.matchingPatterns).reduce<\n    Array<string | string[]>\n  >((acc, attributeName) => {\n    const attributePattern = props.matchingPatterns[attributeName];\n    const attributeValue = getPropertyByPath(props.hit, attributeName);\n    const attributeScore = attributePattern.score;\n\n    if (Array.isArray(attributeValue)) {\n      return [\n        ...acc,\n        attributeValue.map((attributeSubValue) => {\n          return createOptionalFilter({\n            attributeName,\n            attributeValue: attributeSubValue,\n            attributeScore,\n          });\n        }),\n      ];\n    }\n\n    if (typeof attributeValue === 'string') {\n      return [\n        ...acc,\n        createOptionalFilter({\n          attributeName,\n          attributeValue,\n          attributeScore,\n        }),\n      ];\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The \\`matchingPatterns\\` option returned a value of type ${getObjectType(\n          attributeValue\n        )} for the \"${attributeName}\" key. This value was not sent to Algolia because \\`optionalFilters\\` only supports strings and array of strings.\n\nYou can remove the \"${attributeName}\" key from the \\`matchingPatterns\\` option.\n\nSee https://www.algolia.com/doc/api-reference/api-parameters/optionalFilters/`\n      );\n    }\n\n    return acc;\n  }, []);\n\n  return props.transformSearchParameters(\n    new algoliasearchHelper.SearchParameters({\n      // @ts-ignore @TODO algoliasearch-helper@3.0.1 will contain the type\n      // `sumOrFiltersScores`.\n      // See https://github.com/algolia/algoliasearch-helper-js/pull/753\n      sumOrFiltersScores: true,\n      facetFilters: [`objectID:-${props.hit.objectID}`],\n      optionalFilters,\n    })\n  );\n}\n\ninterface ConnectorState {\n  _searchParameters: PlainSearchParameters;\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaConfigureRelatedItems',\n  $$type: 'ais.configureRelatedItems',\n\n  defaultProps,\n\n  getProvidedProps() {\n    return {};\n  },\n\n  getSearchParameters(\n    searchParameters: SearchParameters,\n    props: ConnectedProps<InternalConfigureRelatedItemsProps>\n  ) {\n    return searchParameters.setQueryParameters(\n      getSearchParametersFromProps(props)\n    );\n  },\n\n  transitionState(\n    this: ConnectorState,\n    props,\n    _prevSearchState,\n    nextSearchState\n  ) {\n    const id = getId();\n    // We need to transform the exhaustive search parameters back to clean\n    // search parameters without the empty default keys so we don't pollute the\n    // `configure` search state.\n    const searchParameters = removeEmptyArraysFromObject(\n      removeEmptyKey(getSearchParametersFromProps(props))\n    );\n\n    const searchParametersKeys = Object.keys(searchParameters);\n    const nonPresentKeys = this._searchParameters\n      ? Object.keys(this._searchParameters).filter(\n          (prop) => searchParametersKeys.indexOf(prop) === -1\n        )\n      : [];\n    this._searchParameters = searchParameters;\n    const nextValue: any = {\n      [id]: {\n        ...omit(nextSearchState[id], nonPresentKeys),\n        ...searchParameters,\n      },\n    };\n\n    return refineValue(nextSearchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(this: ConnectorState, props, searchState) {\n    const id = getId();\n    const indexId = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const subState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[indexId]\n        : searchState;\n\n    const configureKeys =\n      subState && subState[id] ? Object.keys(subState[id]) : [];\n\n    const configureState = (\n      configureKeys as Array<keyof PlainSearchParameters>\n    ).reduce((acc, item) => {\n      if (!this._searchParameters[item]) {\n        (acc as any)[item] = subState[id][item];\n      }\n\n      return acc;\n    }, {} as PlainSearchParameters);\n\n    const nextValue = { [id]: configureState };\n\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nexport function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nexport var title = 'browser';\nexport var platform = 'browser';\nexport var browser = true;\nexport var env = {};\nexport var argv = [];\nexport var version = ''; // empty string to avoid regexp issues\nexport var versions = {};\nexport var release = {};\nexport var config = {};\n\nfunction noop() {}\n\nexport var on = noop;\nexport var addListener = noop;\nexport var once = noop;\nexport var off = noop;\nexport var removeListener = noop;\nexport var removeAllListeners = noop;\nexport var emit = noop;\n\nexport function binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nexport function cwd () { return '/' }\nexport function chdir (dir) {\n    throw new Error('process.chdir is not supported');\n};\nexport function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nexport function hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nexport function uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nexport default {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n","export default (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","import connectConfigureRelatedItems from '../connectors/connectConfigureRelatedItems';\nimport PropTypes from 'prop-types';\n\nfunction ConfigureRelatedItems() {\n  return null;\n}\n\nConfigureRelatedItems.propTypes = {\n  hit: PropTypes.object.isRequired,\n  matchingPatterns: PropTypes.object.isRequired,\n  transformSearchParameters: PropTypes.func,\n};\n\nexport default connectConfigureRelatedItems(ConfigureRelatedItems, {\n  $$widgetType: 'ais.configureRelatedItems',\n});\n","import type { SearchParameters } from 'algoliasearch-helper';\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\n// @ts-ignore\nimport { getResults } from '../core/indexUtils';\n\nconst MAX_WILDCARD_FACETS = 20;\n\nexport default createConnector({\n  displayName: 'AlgoliaDynamicWidgets',\n  $$type: 'ais.dynamicWidgets',\n\n  defaultProps: {\n    transformItems: (items: any[]) => items,\n    maxValuesPerFacet: 20,\n  },\n\n  propTypes: {\n    transformItems: PropTypes.func,\n    facets: PropTypes.arrayOf(PropTypes.string),\n    maxValuesPerFacet: PropTypes.number,\n  },\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (\n      props.facets &&\n      !(\n        Array.isArray(props.facets) &&\n        props.facets.length <= 1 &&\n        (props.facets[0] === '*' || props.facets[0] === undefined)\n      )\n    ) {\n      throw new Error(\n        `The \\`facets\\` prop only accepts [] or [\"*\"], you passed ${JSON.stringify(\n          props.facets\n        )}`\n      );\n    }\n\n    if (!results) {\n      return { attributesToRender: [] };\n    }\n\n    const facetOrder =\n      (results.renderingContent &&\n        results.renderingContent.facetOrdering &&\n        results.renderingContent.facetOrdering.facets &&\n        results.renderingContent.facetOrdering.facets.order) ||\n      [];\n\n    const attributesToRender = props.transformItems(facetOrder, { results });\n\n    if (attributesToRender.length > MAX_WILDCARD_FACETS && !props.facets) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `More than ${MAX_WILDCARD_FACETS} facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set \"facets\" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.`\n      );\n    }\n\n    if (props.maxValuesPerFacet < results._state.maxValuesPerFacet) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The maxValuesPerFacet set by dynamic widgets (${props.maxValuesPerFacet}) is smaller than one of the limits set by a widget (${results._state.maxValuesPerFacet}). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted.`\n      );\n    }\n\n    return {\n      attributesToRender,\n    };\n  },\n\n  getSearchParameters(searchParameters, props) {\n    return (props.facets || ['*']).reduce(\n      (acc: SearchParameters, curr: string) => acc.addFacet(curr),\n      searchParameters.setQueryParameters({\n        maxValuesPerFacet: Math.max(\n          props.maxValuesPerFacet || 0,\n          searchParameters.maxValuesPerFacet || 0\n        ),\n      })\n    );\n  },\n});\n","import type { ComponentType, ReactElement, ReactNode } from 'react';\nimport React, { Fragment } from 'react';\nimport { getDisplayName } from '../core/utils';\nimport connectDynamicWidgets from '../connectors/connectDynamicWidgets';\n\nfunction isReactElement(element: any): element is ReactElement {\n  return typeof element === 'object' && element.props;\n}\n\nfunction getAttribute(element: ReactNode): string | undefined {\n  if (!isReactElement(element)) {\n    return undefined;\n  }\n\n  if (element.props.attribute) {\n    return element.props.attribute;\n  }\n  if (Array.isArray(element.props.attributes)) {\n    return element.props.attributes[0];\n  }\n  if (element.props.children) {\n    return getAttribute(React.Children.only(element.props.children));\n  }\n\n  return undefined;\n}\n\ntype DynamicWidgetsProps = {\n  children: ReactNode;\n  attributesToRender: string[];\n  fallbackComponent?: ComponentType<{ attribute: string }>;\n};\n\nfunction DynamicWidgets({\n  children,\n  attributesToRender,\n  fallbackComponent: Fallback = () => null,\n}: DynamicWidgetsProps) {\n  const widgets: Map<string, ReactNode> = new Map();\n\n  React.Children.forEach(children, (child) => {\n    const attribute = getAttribute(child);\n    if (!attribute) {\n      throw new Error(\n        `Could not find \"attribute\" prop for ${getDisplayName(child)}.`\n      );\n    }\n    widgets.set(attribute, child);\n  });\n\n  // on initial render this will be empty, but React InstantSearch keeps\n  // search state for unmounted components in place, so routing works.\n  return (\n    <>\n      {attributesToRender.map((attribute) => (\n        <Fragment key={attribute}>\n          {widgets.get(attribute) || <Fallback attribute={attribute} />}\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\nexport default connectDynamicWidgets(DynamicWidgets, {\n  $$widgetType: 'ais.dynamicWidgets',\n});\n","import type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\n// @ts-ignore\nimport { getResults, getIndexId, hasMultipleIndices } from '../core/indexUtils';\n\ntype SearchState = any;\n\ntype SearchParameters = any;\n\nexport type CustomUserData = {\n  [key: string]: any;\n};\n\ntype TrackedFilterRefinement = string | number | boolean;\n\nexport type QueryRulesProps<TItem = CustomUserData> = {\n  trackedFilters: {\n    [facetName: string]: (\n      facetValues: TrackedFilterRefinement[]\n    ) => TrackedFilterRefinement[];\n  };\n  transformRuleContexts: (ruleContexts: string[]) => string[];\n  transformItems: (items: TItem[]) => TItem[];\n};\n\n// A context rule must consist only of alphanumeric characters, hyphens, and underscores.\n// See https://www.algolia.com/doc/guides/managing-results/refine-results/merchandising-and-promoting/in-depth/implementing-query-rules/#context\nfunction escapeRuleContext(ruleName: string): string {\n  return ruleName.replace(/[^a-z0-9-_]+/gi, '_');\n}\n\nfunction getWidgetRefinements(\n  attribute: string,\n  widgetKey: string,\n  searchState: SearchState\n): TrackedFilterRefinement[] {\n  const widgetState = searchState[widgetKey];\n\n  switch (widgetKey) {\n    case 'range':\n      return Object.keys(widgetState[attribute]).map(\n        (rangeKey) => widgetState[attribute][rangeKey]\n      );\n\n    case 'refinementList':\n      return widgetState[attribute];\n\n    case 'hierarchicalMenu':\n      return [widgetState[attribute]];\n\n    case 'menu':\n      return [widgetState[attribute]];\n\n    case 'multiRange':\n      return widgetState[attribute].split(':');\n\n    case 'toggle':\n      return [widgetState[attribute]];\n\n    default:\n      return [];\n  }\n}\n\nfunction getRefinements(\n  attribute: string,\n  searchState: SearchState = {}\n): TrackedFilterRefinement[] {\n  const refinements = Object.keys(searchState)\n    .filter(\n      (widgetKey) =>\n        searchState[widgetKey] !== undefined &&\n        searchState[widgetKey][attribute] !== undefined\n    )\n    .map((widgetKey) => getWidgetRefinements(attribute, widgetKey, searchState))\n    .reduce((acc, current) => acc.concat(current), []); // flatten the refinements\n\n  return refinements;\n}\n\nfunction getRuleContextsFromTrackedFilters({\n  searchState,\n  trackedFilters,\n}: {\n  searchState: SearchState;\n  trackedFilters: QueryRulesProps['trackedFilters'];\n}) {\n  const ruleContexts = Object.keys(trackedFilters).reduce<string[]>(\n    (facets, facetName) => {\n      const facetRefinements: TrackedFilterRefinement[] = getRefinements(\n        facetName,\n        searchState\n      );\n\n      const getTrackedFacetValues = trackedFilters[facetName];\n      const trackedFacetValues = getTrackedFacetValues(facetRefinements);\n\n      return [\n        ...facets,\n        ...facetRefinements\n          .filter((facetRefinement) =>\n            trackedFacetValues.includes(facetRefinement)\n          )\n          .map((facetValue) =>\n            escapeRuleContext(`ais-${facetName}-${facetValue}`)\n          ),\n      ];\n    },\n    []\n  );\n\n  return ruleContexts;\n}\n\nconst defaultProps: QueryRulesProps = {\n  transformItems: (items) => items,\n  transformRuleContexts: (ruleContexts) => ruleContexts,\n  trackedFilters: {},\n};\n\nexport default createConnector({\n  displayName: 'AlgoliaQueryRules',\n  $$type: 'ais.queryRules',\n\n  defaultProps,\n\n  getProvidedProps(\n    props: ConnectedProps<QueryRulesProps>,\n    _1: any,\n    searchResults: any\n  ) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (results === null) {\n      return {\n        items: [],\n        canRefine: false,\n      };\n    }\n\n    const { userData = [] } = results;\n    const { transformItems } = props;\n    const transformedItems = transformItems(userData);\n\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  getSearchParameters(\n    searchParameters: SearchParameters,\n    props: ConnectedProps<QueryRulesProps>,\n    searchState: SearchState\n  ) {\n    if (Object.keys(props.trackedFilters).length === 0) {\n      return searchParameters;\n    }\n\n    const indexSearchState =\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) && searchState.indices\n        ? searchState.indices[\n            getIndexId({\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            })\n          ]\n        : searchState;\n\n    const newRuleContexts = getRuleContextsFromTrackedFilters({\n      searchState: indexSearchState,\n      trackedFilters: props.trackedFilters,\n    });\n\n    const initialRuleContexts = searchParameters.ruleContexts || [];\n    const nextRuleContexts = [...initialRuleContexts, ...newRuleContexts];\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nextRuleContexts.length > 10) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `The maximum number of \\`ruleContexts\\` is 10. They have been sliced to that limit.\nConsider using \\`transformRuleContexts\\` to minimize the number of rules sent to Algolia.`\n        );\n      }\n    }\n\n    const ruleContexts = props\n      .transformRuleContexts(nextRuleContexts)\n      .slice(0, 10);\n\n    return searchParameters.setQueryParameter('ruleContexts', ruleContexts);\n  },\n});\n","import connectQueryRules from '../connectors/connectQueryRules';\n\nexport default connectQueryRules(\n  function QueryRuleContext() {\n    return null;\n  },\n  { $$widgetType: 'ais.queryRuleContext' }\n);\n","import React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport type { InstantSearchContext, IndexContext } from '../core/context';\nimport { InstantSearchConsumer, IndexProvider } from '../core/context';\nimport type { SearchParameters } from 'algoliasearch-helper';\n\nfunction getIndexContext(props: Props): IndexContext {\n  return {\n    targetedIndex: props.indexId,\n  };\n}\n\ntype Props = {\n  indexName: string;\n  indexId: string;\n  children?: React.ReactNode;\n};\n\ntype InnerProps = Props & { contextValue: InstantSearchContext };\n\ntype State = {\n  indexContext: IndexContext;\n};\n\n/**\n * The component that allows you to apply widgets to a dedicated index. It's\n * useful if you want to build an interface that targets multiple indices.\n *\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Index, SearchBox, Hits, Configure } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <Configure hitsPerPage={5} />\n *     <SearchBox />\n *     <Index indexName=\"instant_search\">\n *       <Hits />\n *     </Index>\n *     <Index indexName=\"bestbuy\">\n *       <Hits />\n *     </Index>\n *   </InstantSearch>\n * );\n */\nclass Index extends Component<InnerProps, State> {\n  static propTypes = {\n    indexName: PropTypes.string.isRequired,\n    indexId: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  };\n\n  static displayName = 'AlgoliaIndex';\n  static $$type = 'ais.index';\n  static $$widgetType = 'ais.index';\n\n  static getDerivedStateFromProps(props: InnerProps) {\n    return {\n      indexContext: getIndexContext(props),\n    };\n  }\n\n  state = {\n    indexContext: getIndexContext(this.props),\n  };\n\n  unregisterWidget?: () => void;\n\n  constructor(props: InnerProps) {\n    super(props);\n\n    this.props.contextValue.onSearchParameters(\n      this.getSearchParameters.bind(this),\n      {\n        ais: this.props.contextValue,\n        multiIndexContext: this.state.indexContext,\n      },\n      this.props,\n      undefined,\n      Index.displayName\n    );\n  }\n\n  componentDidMount() {\n    this.unregisterWidget =\n      this.props.contextValue.widgetsManager.registerWidget(this);\n  }\n\n  componentDidUpdate(prevProps: InnerProps) {\n    if (this.props.indexName !== prevProps.indexName) {\n      this.props.contextValue.widgetsManager.update();\n    }\n  }\n\n  componentWillUnmount() {\n    if (typeof this.unregisterWidget === 'function') {\n      this.unregisterWidget();\n    }\n  }\n\n  getSearchParameters(searchParameters: SearchParameters, props: InnerProps) {\n    return searchParameters.setIndex(\n      this.props ? this.props.indexName : props.indexName\n    );\n  }\n\n  render() {\n    const childrenCount = Children.count(this.props.children);\n    if (childrenCount === 0) {\n      return null;\n    }\n    return (\n      <IndexProvider value={this.state.indexContext}>\n        {this.props.children}\n      </IndexProvider>\n    );\n  }\n}\n\ntype IndexWrapperProps = {\n  indexName: string;\n  indexId?: string;\n};\n\nconst IndexWrapper: React.FC<IndexWrapperProps> = (props) => {\n  const inferredIndexId = props.indexName;\n  return (\n    <InstantSearchConsumer>\n      {(contextValue) => (\n        <Index\n          contextValue={contextValue}\n          indexId={inferredIndexId}\n          {...props}\n        />\n      )}\n    </InstantSearchConsumer>\n  );\n};\n\nIndexWrapper.propTypes = {\n  indexName: PropTypes.string.isRequired,\n  indexId: PropTypes.string,\n};\n\nexport const IndexComponentWithoutContext = Index;\nexport default IndexWrapper;\n","import algoliasearchHelper from 'algoliasearch-helper';\nimport createWidgetsManager from './createWidgetsManager';\nimport createStore from './createStore';\nimport { HIGHLIGHT_TAGS } from './highlight';\nimport { hasMultipleIndices } from './indexUtils';\nimport { version as ReactVersion } from 'react';\nimport version from './version';\n\nfunction addAlgoliaAgents(searchClient) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    searchClient.addAlgoliaAgent(`react (${ReactVersion})`);\n    searchClient.addAlgoliaAgent(`react-instantsearch (${version})`);\n  }\n}\n\nconst isMultiIndexContext = (widget) =>\n  hasMultipleIndices({\n    ais: widget.props.contextValue,\n    multiIndexContext: widget.props.indexContextValue,\n  });\nconst isTargetedIndexEqualIndex = (widget, indexId) =>\n  widget.props.indexContextValue.targetedIndex === indexId;\n\n// Relying on the `indexId` is a bit brittle to detect the `Index` widget.\n// Since it's a class we could rely on `instanceof` or similar. We never\n// had an issue though. Works for now.\nconst isIndexWidget = (widget) => Boolean(widget.props.indexId);\nconst isIndexWidgetEqualIndex = (widget, indexId) =>\n  widget.props.indexId === indexId;\n\nconst sortIndexWidgetsFirst = (firstWidget, secondWidget) => {\n  const isFirstWidgetIndex = isIndexWidget(firstWidget);\n  const isSecondWidgetIndex = isIndexWidget(secondWidget);\n\n  if (isFirstWidgetIndex && !isSecondWidgetIndex) {\n    return -1;\n  }\n  if (!isFirstWidgetIndex && isSecondWidgetIndex) {\n    return 1;\n  }\n  return 0;\n};\n\n// This function is copied from the algoliasearch v4 API Client. If modified,\n// consider updating it also in `serializeQueryParameters` from `@algolia/transporter`.\nfunction serializeQueryParameters(parameters) {\n  const isObjectOrArray = (value) =>\n    Object.prototype.toString.call(value) === '[object Object]' ||\n    Object.prototype.toString.call(value) === '[object Array]';\n\n  const encode = (format, ...args) => {\n    let i = 0;\n    return format.replace(/%s/g, () => encodeURIComponent(args[i++]));\n  };\n\n  return Object.keys(parameters)\n    .map((key) =>\n      encode(\n        '%s=%s',\n        key,\n        isObjectOrArray(parameters[key])\n          ? JSON.stringify(parameters[key])\n          : parameters[key]\n      )\n    )\n    .join('&');\n}\n\n/**\n * Creates a new instance of the InstantSearchManager which controls the widgets and\n * trigger the search when the widgets are updated.\n * @param {string} indexName - the main index name\n * @param {object} initialState - initial widget state\n * @param {object} SearchParameters - optional additional parameters to send to the algolia API\n * @param {number} stalledSearchDelay - time (in ms) after the search is stalled\n * @return {InstantSearchManager} a new instance of InstantSearchManager\n */\nexport default function createInstantSearchManager({\n  indexName,\n  initialState = {},\n  searchClient,\n  resultsState,\n  stalledSearchDelay,\n}) {\n  const helper = algoliasearchHelper(searchClient, indexName, {\n    ...HIGHLIGHT_TAGS,\n  });\n\n  addAlgoliaAgents(searchClient);\n\n  helper\n    .on('search', handleNewSearch)\n    .on('result', handleSearchSuccess({ indexId: indexName }))\n    .on('error', handleSearchError);\n\n  let skip = false;\n  let stalledSearchTimer = null;\n  let initialSearchParameters = helper.state;\n  let searchCounter;\n\n  const widgetsManager = createWidgetsManager(onWidgetsUpdate);\n\n  hydrateSearchClient(searchClient, resultsState);\n\n  const store = createStore({\n    widgets: initialState,\n    metadata: hydrateMetadata(resultsState),\n    results: hydrateResultsState(resultsState),\n    error: null,\n    searching: false,\n    isSearchStalled: true,\n    searchingForFacetValues: false,\n  });\n\n  function skipSearch() {\n    skip = true;\n  }\n\n  function updateClient(client) {\n    addAlgoliaAgents(client);\n    helper.setClient(client);\n    search();\n  }\n\n  function clearCache() {\n    helper.clearCache();\n    search();\n  }\n\n  function getMetadata(state) {\n    return widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getMetadata))\n      .map((widget) => widget.getMetadata(state));\n  }\n\n  function getSearchParameters() {\n    const sharedParameters = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter(\n        (widget) => !isMultiIndexContext(widget) && !isIndexWidget(widget)\n      )\n      .reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        initialSearchParameters\n      );\n\n    const mainParameters = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter((widget) => {\n        const targetedIndexEqualMainIndex =\n          isMultiIndexContext(widget) &&\n          isTargetedIndexEqualIndex(widget, indexName);\n\n        const subIndexEqualMainIndex =\n          isIndexWidget(widget) && isIndexWidgetEqualIndex(widget, indexName);\n\n        return targetedIndexEqualMainIndex || subIndexEqualMainIndex;\n      })\n      // We have to sort the `Index` widgets first so the `index` parameter\n      // is correctly set in the `reduce` function for the following widgets\n      .sort(sortIndexWidgetsFirst)\n      .reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        sharedParameters\n      );\n\n    const derivedIndices = widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.getSearchParameters))\n      .filter((widget) => {\n        const targetedIndexNotEqualMainIndex =\n          isMultiIndexContext(widget) &&\n          !isTargetedIndexEqualIndex(widget, indexName);\n\n        const subIndexNotEqualMainIndex =\n          isIndexWidget(widget) && !isIndexWidgetEqualIndex(widget, indexName);\n\n        return targetedIndexNotEqualMainIndex || subIndexNotEqualMainIndex;\n      })\n      // We have to sort the `Index` widgets first so the `index` parameter\n      // is correctly set in the `reduce` function for the following widgets\n      .sort(sortIndexWidgetsFirst)\n      .reduce((indices, widget) => {\n        const indexId = isMultiIndexContext(widget)\n          ? widget.props.indexContextValue.targetedIndex\n          : widget.props.indexId;\n\n        const widgets = indices[indexId] || [];\n\n        return {\n          ...indices,\n          [indexId]: widgets.concat(widget),\n        };\n      }, {});\n\n    const derivedParameters = Object.keys(derivedIndices).map((indexId) => ({\n      parameters: derivedIndices[indexId].reduce(\n        (res, widget) => widget.getSearchParameters(res),\n        sharedParameters\n      ),\n      indexId,\n    }));\n\n    return {\n      mainParameters,\n      derivedParameters,\n    };\n  }\n\n  function search() {\n    if (!skip) {\n      const { mainParameters, derivedParameters } = getSearchParameters(\n        helper.state\n      );\n\n      searchCounter = derivedParameters.length + 1;\n\n      // We have to call `slice` because the method `detach` on the derived\n      // helpers mutates the value `derivedHelpers`. The `forEach` loop does\n      // not iterate on each value and we're not able to correctly clear the\n      // previous derived helpers (memory leak + useless requests).\n      helper.derivedHelpers.slice().forEach((derivedHelper) => {\n        // Since we detach the derived helpers on **every** new search they\n        // won't receive intermediate results in case of a stalled search.\n        // Only the last result is dispatched by the derived helper because\n        // they are not detached yet:\n        //\n        // - a -> main helper receives results\n        // - ap -> main helper receives results\n        // - app -> main helper + derived helpers receive results\n        //\n        // The quick fix is to avoid to detach them on search but only once they\n        // received the results. But it means that in case of a stalled search\n        // all the derived helpers not detached yet register a new search inside\n        // the helper. The number grows fast in case of a bad network and it's\n        // not deterministic.\n        derivedHelper.detach();\n      });\n\n      derivedParameters.forEach(({ indexId, parameters }) => {\n        const derivedHelper = helper.derive(() => parameters);\n\n        derivedHelper\n          .on('result', handleSearchSuccess({ indexId }))\n          .on('error', handleSearchError);\n      });\n\n      helper.setState(mainParameters);\n\n      helper.search();\n    }\n  }\n\n  function handleSearchSuccess({ indexId }) {\n    return (event) => {\n      searchCounter--;\n\n      const state = store.getState();\n      const isDerivedHelpersEmpty = !helper.derivedHelpers.length;\n\n      let results = state.results ? state.results : {};\n\n      // Switching from mono index to multi index and vice versa must reset the\n      // results to an empty object, otherwise we keep reference of stalled and\n      // unused results.\n      results = !isDerivedHelpersEmpty && results.getFacetByName ? {} : results;\n\n      if (!isDerivedHelpersEmpty) {\n        results = { ...results, [indexId]: event.results };\n      } else {\n        results = event.results;\n      }\n\n      const currentState = store.getState();\n      let nextIsSearchStalled = currentState.isSearchStalled;\n      if (!helper.hasPendingRequests()) {\n        clearTimeout(stalledSearchTimer);\n        stalledSearchTimer = null;\n        nextIsSearchStalled = false;\n      }\n\n      const { resultsFacetValues, ...partialState } = currentState;\n\n      store.setState({\n        ...partialState,\n        results,\n        isSearchStalled: nextIsSearchStalled,\n        searching: searchCounter > 0,\n        error: null,\n      });\n    };\n  }\n\n  function handleSearchError({ error }) {\n    const currentState = store.getState();\n\n    let nextIsSearchStalled = currentState.isSearchStalled;\n    if (!helper.hasPendingRequests()) {\n      clearTimeout(stalledSearchTimer);\n      nextIsSearchStalled = false;\n    }\n\n    const { resultsFacetValues, ...partialState } = currentState;\n\n    store.setState({\n      ...partialState,\n      isSearchStalled: nextIsSearchStalled,\n      error,\n      searching: false,\n    });\n  }\n\n  function handleNewSearch() {\n    if (!stalledSearchTimer) {\n      stalledSearchTimer = setTimeout(() => {\n        const { resultsFacetValues, ...partialState } = store.getState();\n\n        store.setState({\n          ...partialState,\n          isSearchStalled: true,\n        });\n      }, stalledSearchDelay);\n    }\n  }\n\n  function hydrateSearchClient(client, results) {\n    if (!results) {\n      return;\n    }\n\n    // Disable cache hydration on:\n    // - Algoliasearch API Client < v4 with cache disabled\n    // - Third party clients (detected by the `addAlgoliaAgent` function missing)\n\n    if (\n      (!client.transporter || client._cacheHydrated) &&\n      (!client._useCache || typeof client.addAlgoliaAgent !== 'function')\n    ) {\n      return;\n    }\n\n    // Algoliasearch API Client >= v4\n    // To hydrate the client we need to populate the cache with the data from\n    // the server (done in `hydrateSearchClientWithMultiIndexRequest` or\n    // `hydrateSearchClientWithSingleIndexRequest`). But since there is no way\n    // for us to compute the key the same way as `algoliasearch-client` we need\n    // to populate it on a custom key and override the `search` method to\n    // search on it first.\n    if (client.transporter && !client._cacheHydrated) {\n      client._cacheHydrated = true;\n\n      const baseMethod = client.search;\n      client.search = (requests, ...methodArgs) => {\n        const requestsWithSerializedParams = requests.map((request) => ({\n          ...request,\n          params: serializeQueryParameters(request.params),\n        }));\n\n        return client.transporter.responsesCache.get(\n          {\n            method: 'search',\n            args: [requestsWithSerializedParams, ...methodArgs],\n          },\n          () => {\n            return baseMethod(requests, ...methodArgs);\n          }\n        );\n      };\n    }\n\n    if (Array.isArray(results.results)) {\n      hydrateSearchClientWithMultiIndexRequest(client, results.results);\n      return;\n    }\n\n    hydrateSearchClientWithSingleIndexRequest(client, results);\n  }\n\n  function hydrateSearchClientWithMultiIndexRequest(client, results) {\n    // Algoliasearch API Client >= v4\n    // Populate the cache with the data from the server\n    if (client.transporter) {\n      client.transporter.responsesCache.set(\n        {\n          method: 'search',\n          args: [\n            results.reduce(\n              (acc, result) =>\n                acc.concat(\n                  result.rawResults.map((request) => ({\n                    indexName: request.index,\n                    params: request.params,\n                  }))\n                ),\n              []\n            ),\n          ],\n        },\n        {\n          results: results.reduce(\n            (acc, result) => acc.concat(result.rawResults),\n            []\n          ),\n        }\n      );\n      return;\n    }\n\n    // Algoliasearch API Client < v4\n    // Prior to client v4 we didn't have a proper API to hydrate the client\n    // cache from the outside. The following code populates the cache with\n    // a single-index result. You can find more information about the\n    // computation of the key inside the client (see link below).\n    // https://github.com/algolia/algoliasearch-client-javascript/blob/c27e89ff92b2a854ae6f40dc524bffe0f0cbc169/src/AlgoliaSearchCore.js#L232-L240\n    const key = `/1/indexes/*/queries_body_${JSON.stringify({\n      requests: results.reduce(\n        (acc, result) =>\n          acc.concat(\n            result.rawResults.map((request) => ({\n              indexName: request.index,\n              params: request.params,\n            }))\n          ),\n        []\n      ),\n    })}`;\n\n    client.cache = {\n      ...client.cache,\n      [key]: JSON.stringify({\n        results: results.reduce(\n          (acc, result) => acc.concat(result.rawResults),\n          []\n        ),\n      }),\n    };\n  }\n\n  function hydrateSearchClientWithSingleIndexRequest(client, results) {\n    // Algoliasearch API Client >= v4\n    // Populate the cache with the data from the server\n    if (client.transporter) {\n      client.transporter.responsesCache.set(\n        {\n          method: 'search',\n          args: [\n            results.rawResults.map((request) => ({\n              indexName: request.index,\n              params: request.params,\n            })),\n          ],\n        },\n        {\n          results: results.rawResults,\n        }\n      );\n      return;\n    }\n    // Algoliasearch API Client < v4\n    // Prior to client v4 we didn't have a proper API to hydrate the client\n    // cache from the outside. The following code populates the cache with\n    // a single-index result. You can find more information about the\n    // computation of the key inside the client (see link below).\n    // https://github.com/algolia/algoliasearch-client-javascript/blob/c27e89ff92b2a854ae6f40dc524bffe0f0cbc169/src/AlgoliaSearchCore.js#L232-L240\n    const key = `/1/indexes/*/queries_body_${JSON.stringify({\n      requests: results.rawResults.map((request) => ({\n        indexName: request.index,\n        params: request.params,\n      })),\n    })}`;\n\n    client.cache = {\n      ...client.cache,\n      [key]: JSON.stringify({\n        results: results.rawResults,\n      }),\n    };\n  }\n\n  function hydrateResultsState(results) {\n    if (!results) {\n      return null;\n    }\n\n    if (Array.isArray(results.results)) {\n      return results.results.reduce(\n        (acc, result) => ({\n          ...acc,\n          [result._internalIndexId]: new algoliasearchHelper.SearchResults(\n            new algoliasearchHelper.SearchParameters(result.state),\n            result.rawResults\n          ),\n        }),\n        {}\n      );\n    }\n\n    return new algoliasearchHelper.SearchResults(\n      new algoliasearchHelper.SearchParameters(results.state),\n      results.rawResults\n    );\n  }\n\n  // Called whenever a widget has been rendered with new props.\n  function onWidgetsUpdate() {\n    const metadata = getMetadata(store.getState().widgets);\n\n    store.setState({\n      ...store.getState(),\n      metadata,\n      searching: true,\n    });\n\n    // Since the `getSearchParameters` method of widgets also depends on props,\n    // the result search parameters might have changed.\n    search();\n  }\n\n  function transitionState(nextSearchState) {\n    const searchState = store.getState().widgets;\n\n    return widgetsManager\n      .getWidgets()\n      .filter((widget) => Boolean(widget.transitionState))\n      .reduce(\n        (res, widget) => widget.transitionState(searchState, res),\n        nextSearchState\n      );\n  }\n\n  function onExternalStateUpdate(nextSearchState) {\n    const metadata = getMetadata(nextSearchState);\n\n    store.setState({\n      ...store.getState(),\n      widgets: nextSearchState,\n      metadata,\n      searching: true,\n    });\n\n    search();\n  }\n\n  function onSearchForFacetValues({ facetName, query, maxFacetHits = 10 }) {\n    // The values 1, 100 are the min / max values that the engine accepts.\n    // see: https://www.algolia.com/doc/api-reference/api-parameters/maxFacetHits\n    const maxFacetHitsWithinRange = Math.max(1, Math.min(maxFacetHits, 100));\n\n    store.setState({\n      ...store.getState(),\n      searchingForFacetValues: true,\n    });\n\n    helper\n      .searchForFacetValues(facetName, query, maxFacetHitsWithinRange)\n      .then(\n        (content) => {\n          store.setState({\n            ...store.getState(),\n            error: null,\n            searchingForFacetValues: false,\n            resultsFacetValues: {\n              ...store.getState().resultsFacetValues,\n              [facetName]: content.facetHits,\n              query,\n            },\n          });\n        },\n        (error) => {\n          store.setState({\n            ...store.getState(),\n            searchingForFacetValues: false,\n            error,\n          });\n        }\n      )\n      .catch((error) => {\n        // Since setState is synchronous, any error that occurs in the render of a\n        // component will be swallowed by this promise.\n        // This is a trick to make the error show up correctly in the console.\n        // See http://stackoverflow.com/a/30741722/969302\n        setTimeout(() => {\n          throw error;\n        });\n      });\n  }\n\n  function updateIndex(newIndex) {\n    initialSearchParameters = initialSearchParameters.setIndex(newIndex);\n    // No need to trigger a new search here as the widgets will also update and trigger it if needed.\n  }\n\n  function getWidgetsIds() {\n    return store\n      .getState()\n      .metadata.reduce(\n        (res, meta) =>\n          typeof meta.id !== 'undefined' ? res.concat(meta.id) : res,\n        []\n      );\n  }\n\n  return {\n    store,\n    widgetsManager,\n    getWidgetsIds,\n    getSearchParameters,\n    onSearchForFacetValues,\n    onExternalStateUpdate,\n    transitionState,\n    updateClient,\n    updateIndex,\n    clearCache,\n    skipSearch,\n  };\n}\n\nfunction hydrateMetadata(resultsState) {\n  if (!resultsState) {\n    return [];\n  }\n\n  // add a value noop, which gets replaced once the widgets are mounted\n  return resultsState.metadata.map((datum) => ({\n    value: () => ({}),\n    ...datum,\n    items:\n      datum.items &&\n      datum.items.map((item) => ({\n        value: () => ({}),\n        ...item,\n        items:\n          item.items &&\n          item.items.map((nestedItem) => ({\n            value: () => ({}),\n            ...nestedItem,\n          })),\n      })),\n  }));\n}\n","import type { Component } from 'react';\nimport type { ConnectorDescription } from './createConnector';\nimport { defer } from './utils';\n\nexport type Widget = Component & {\n  constructor: {\n    displayName?: string;\n    $$type?: string;\n    $$widgetType?: string;\n    _connectorDesc?: ConnectorDescription;\n  };\n};\n\nexport type WidgetsManager = ReturnType<typeof createWidgetsManager>;\n\nexport default function createWidgetsManager(onWidgetsUpdate: () => void) {\n  const widgets: Widget[] = [];\n  // Is an update scheduled?\n  let scheduled = false;\n\n  // The state manager's updates need to be batched since more than one\n  // component can register or unregister widgets during the same tick.\n  function scheduleUpdate() {\n    if (scheduled) {\n      return;\n    }\n    scheduled = true;\n    defer(() => {\n      scheduled = false;\n      onWidgetsUpdate();\n    });\n  }\n\n  return {\n    registerWidget(widget: Widget) {\n      widgets.push(widget);\n      scheduleUpdate();\n      return function unregisterWidget() {\n        widgets.splice(widgets.indexOf(widget), 1);\n        scheduleUpdate();\n      };\n    },\n    update: scheduleUpdate,\n    getWidgets() {\n      return widgets;\n    },\n  };\n}\n","type SearchState = any;\ntype ResultsState = any;\ntype ResultsFacetsValues = any;\ntype Listener = () => void;\ntype State = {\n  widgets: SearchState;\n  metadata: any[];\n  results: ResultsState | null;\n  resultsFacetValues: ResultsFacetsValues | null;\n  error: Error | null;\n  searching: boolean;\n  isSearchStalled: boolean;\n  searchingForFacetValues: boolean;\n};\nexport default function createStore(initialState: State) {\n  let state = initialState;\n  const listeners: Listener[] = [];\n  return {\n    getState() {\n      return state;\n    },\n    setState(nextState: State) {\n      state = nextState;\n      listeners.forEach((listener) => listener());\n    },\n    subscribe(listener: Listener) {\n      listeners.push(listener);\n      return function unsubscribe() {\n        listeners.splice(listeners.indexOf(listener), 1);\n      };\n    },\n  };\n}\n\nexport type Store = ReturnType<typeof createStore>;\n","import type { SearchClient } from '../widgets/InstantSearch';\nimport type { Widget } from './createWidgetsManager';\n\nexport function isMetadataEnabled() {\n  return (\n    typeof window === 'object' &&\n    typeof window.navigator === 'object' &&\n    typeof window.navigator.userAgent === 'string' &&\n    window.navigator.userAgent.includes('Algolia Crawler') &&\n    typeof window.document === 'object'\n  );\n}\n\nexport function getMetadataPayload(\n  widgets: Widget[],\n  searchClient: SearchClient\n) {\n  const internalProps = ['contextValue', 'indexContextValue'];\n\n  const widgetsPayload = widgets.map(({ props, constructor }) => {\n    const { defaultProps = {}, displayName = constructor.displayName } =\n      constructor._connectorDesc || {};\n\n    return {\n      displayName,\n      $$type: constructor.$$type,\n      $$widgetType: constructor.$$widgetType,\n      params: Object.keys(props).filter(\n        (prop) =>\n          !internalProps.includes(prop) &&\n          defaultProps[prop] !== (props as any)[prop] &&\n          (props as any)[prop] !== undefined\n      ),\n    };\n  });\n\n  const client = searchClient as Record<string, any>;\n  const ua =\n    client.transporter && client.transporter.userAgent\n      ? client.transporter.userAgent.value\n      : client._ua;\n\n  return {\n    ua,\n    widgets: widgetsPayload,\n  };\n}\n\nexport function injectMetadata(widgets: Widget[], searchClient: SearchClient) {\n  const payloadContainer = document.createElement('meta');\n  const refNode = document.querySelector('head')!;\n  payloadContainer.name = 'algolia:metadata';\n\n  const payload = getMetadataPayload(widgets, searchClient);\n\n  payloadContainer.content = JSON.stringify(payload);\n  refNode.appendChild(payloadContainer);\n}\n","import React, { Component, Children } from 'react';\nimport isEqual from 'react-fast-compare';\nimport PropTypes from 'prop-types';\nimport createInstantSearchManager from '../core/createInstantSearchManager';\nimport type { InstantSearchContext, IndexContext } from '../core/context';\nimport { InstantSearchProvider } from '../core/context';\nimport type { Store } from '../core/createStore';\nimport type {\n  PlainSearchParameters,\n  SearchParameters,\n} from 'algoliasearch-helper';\nimport type { MultiResponse } from '../types/algoliasearch';\nimport type { ConnectorDescription } from '../core/createConnector';\nimport type { WidgetsManager } from '../core/createWidgetsManager';\nimport { isMetadataEnabled, injectMetadata } from '../core/metadata';\n\ntype ResultsState = {\n  metadata: never[];\n  state: PlainSearchParameters;\n  rawResults: MultiResponse;\n};\n\n// @TODO: move to createInstantSearchManager when it's TS\ntype InstantSearchManager = {\n  store: Store;\n  widgetsManager: WidgetsManager;\n  getWidgetsIds(): any;\n  getSearchParameters(...args: any[]): {\n    mainParameters: SearchParameters;\n    derivedParameters: SearchParameters;\n  };\n  onSearchForFacetValues(...args: any[]): any;\n  onExternalStateUpdate(...args: any[]): any;\n  transitionState: any;\n  updateClient: any;\n  updateIndex: any;\n  clearCache(): void;\n  skipSearch(...args: any[]): any;\n};\n\nexport type SearchClient = {\n  search: (requests: Array<{}>) => Promise<{}>;\n  searchForFacetValues: (requests: Array<{}>) => Promise<{}>;\n};\n\ntype SearchState = any;\n\ntype Props = {\n  refresh: boolean;\n  indexName: string;\n  searchClient: SearchClient;\n  createURL?: (searchState: SearchState, knownKeys: any) => string;\n  onSearchStateChange?: (searchState: SearchState) => void;\n  searchState?: SearchState;\n  onSearchParameters?: (\n    getSearchParameters: ConnectorDescription['getSearchParameters'],\n    context: { ais: InstantSearchContext; multiIndexContext: IndexContext },\n    props: object,\n    searchState: SearchState\n  ) => void;\n  widgetsCollector?: (args: {\n    getSearchParameters: ConnectorDescription['getSearchParameters'];\n    getMetadata: ConnectorDescription['getMetadata'];\n    searchState: SearchState;\n    context: { ais: InstantSearchContext; multiIndexContext: IndexContext };\n    props: object;\n    displayName: string;\n  }) => void;\n  stalledSearchDelay?: number;\n  resultsState?: ResultsState | { [indexId: string]: ResultsState };\n  children?: React.ReactNode;\n};\n\ntype State = {\n  isControlled: boolean;\n  instantSearchManager: InstantSearchManager;\n  contextValue: InstantSearchContext;\n};\n\nfunction isControlled(props: Props) {\n  return Boolean(props.searchState);\n}\n\n/**\n * @description\n * `<InstantSearch>` is the root component of all React InstantSearch implementations.\n * It provides all the connected components (aka widgets) a means to interact\n * with the searchState.\n * @kind widget\n * @name <InstantSearch>\n * @requirements You will need to have an Algolia account to be able to use this widget.\n * [Create one now](https://www.algolia.com/users/sign_up).\n * @propType {string} indexName - Main index in which to search.\n * @propType {boolean} [refresh=false] - Flag to activate when the cache needs to be cleared so that the front-end is updated when a change occurs in the index.\n * @propType {object} [searchClient] - Provide a custom search client.\n * @propType {func} [onSearchStateChange] - Function to be called everytime a new search is done. Useful for [URL Routing](guide/Routing.html).\n * @propType {object} [searchState] - Object to inject some search state. Switches the InstantSearch component in controlled mode. Useful for [URL Routing](guide/Routing.html).\n * @propType {func} [createURL] - Function to call when creating links, useful for [URL Routing](guide/Routing.html).\n * @propType {SearchResults|SearchResults[]} [resultsState] - Use this to inject the results that will be used at first rendering. Those results are found by using the `findResultsState` function. Useful for [Server Side Rendering](guide/Server-side_rendering.html).\n * @propType {number} [stalledSearchDelay=200] - The amount of time before considering that the search takes too much time. The time is expressed in milliseconds.\n * @propType {{ Root: string|function, props: object }} [root] - Use this to customize the root element. Default value: `{ Root: 'div' }`\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <SearchBox />\n *     <Hits />\n *   </InstantSearch>\n * );\n */\nclass InstantSearch extends Component<Props, State> {\n  static defaultProps = {\n    stalledSearchDelay: 200,\n    refresh: false,\n  };\n\n  static propTypes = {\n    // @TODO: These props are currently constant.\n    indexName: PropTypes.string.isRequired,\n\n    searchClient: PropTypes.shape({\n      search: PropTypes.func.isRequired,\n      searchForFacetValues: PropTypes.func,\n      addAlgoliaAgent: PropTypes.func,\n      clearCache: PropTypes.func,\n    }).isRequired,\n\n    createURL: PropTypes.func,\n\n    refresh: PropTypes.bool,\n\n    searchState: PropTypes.object,\n    onSearchStateChange: PropTypes.func,\n\n    onSearchParameters: PropTypes.func,\n    widgetsCollector: PropTypes.func,\n    resultsState: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n    children: PropTypes.node,\n    stalledSearchDelay: PropTypes.number,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State\n  ): Partial<State> {\n    const nextIsControlled = isControlled(nextProps);\n    const previousSearchState =\n      prevState.instantSearchManager.store.getState().widgets;\n    const nextSearchState = nextProps.searchState;\n\n    if (nextIsControlled && !isEqual(previousSearchState, nextSearchState)) {\n      prevState.instantSearchManager.onExternalStateUpdate(\n        nextProps.searchState\n      );\n    }\n\n    return {\n      isControlled: nextIsControlled,\n      contextValue: {\n        ...prevState.contextValue,\n        mainTargetedIndex: nextProps.indexName,\n      },\n    };\n  }\n\n  cleanupTimerRef: ReturnType<typeof setTimeout> | null = null;\n  isUnmounting: boolean = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    const instantSearchManager = createInstantSearchManager({\n      indexName: this.props.indexName,\n      searchClient: this.props.searchClient,\n      initialState: this.props.searchState || {},\n      resultsState: this.props.resultsState,\n      stalledSearchDelay: this.props.stalledSearchDelay,\n    });\n\n    const contextValue = {\n      store: instantSearchManager.store,\n      widgetsManager: instantSearchManager.widgetsManager,\n      mainTargetedIndex: this.props.indexName,\n      onInternalStateUpdate: this.onWidgetsInternalStateUpdate.bind(this),\n      createHrefForState: this.createHrefForState.bind(this),\n      onSearchForFacetValues: this.onSearchForFacetValues.bind(this),\n      onSearchStateChange: this.onSearchStateChange.bind(this),\n      onSearchParameters: this.onSearchParameters.bind(this),\n    };\n\n    this.state = {\n      isControlled: isControlled(this.props),\n      instantSearchManager,\n      contextValue,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevIsControlled = isControlled(prevProps);\n\n    if (prevIsControlled && !this.state.isControlled) {\n      throw new Error(\n        \"You can't switch <InstantSearch> from being controlled to uncontrolled\"\n      );\n    }\n\n    if (!prevIsControlled && this.state.isControlled) {\n      throw new Error(\n        \"You can't switch <InstantSearch> from being uncontrolled to controlled\"\n      );\n    }\n\n    if (this.props.refresh !== prevProps.refresh && this.props.refresh) {\n      this.state.instantSearchManager.clearCache();\n    }\n\n    if (prevProps.indexName !== this.props.indexName) {\n      this.state.instantSearchManager.updateIndex(this.props.indexName);\n    }\n\n    if (prevProps.searchClient !== this.props.searchClient) {\n      this.state.instantSearchManager.updateClient(this.props.searchClient);\n    }\n  }\n\n  componentDidMount() {\n    if (this.cleanupTimerRef) {\n      clearTimeout(this.cleanupTimerRef);\n      this.cleanupTimerRef = null;\n    }\n\n    if (isMetadataEnabled()) {\n      injectMetadata(\n        this.state.instantSearchManager.widgetsManager.getWidgets(),\n        this.props.searchClient\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanupTimerRef = setTimeout(() => {\n      this.isUnmounting = true;\n      this.state.instantSearchManager.skipSearch();\n    });\n  }\n\n  createHrefForState(searchState: SearchState) {\n    searchState = this.state.instantSearchManager.transitionState(searchState);\n    return this.state.isControlled && this.props.createURL\n      ? this.props.createURL(searchState, this.getKnownKeys())\n      : '#';\n  }\n\n  onWidgetsInternalStateUpdate(searchState: SearchState) {\n    searchState = this.state.instantSearchManager.transitionState(searchState);\n\n    this.onSearchStateChange(searchState);\n\n    if (!this.state.isControlled) {\n      this.state.instantSearchManager.onExternalStateUpdate(searchState);\n    }\n  }\n\n  onSearchStateChange(searchState: any) {\n    if (this.props.onSearchStateChange && !this.isUnmounting) {\n      this.props.onSearchStateChange(searchState);\n    }\n  }\n\n  onSearchParameters(\n    getSearchParameters: ConnectorDescription['getMetadata'],\n    context: {\n      ais: InstantSearchContext;\n      multiIndexContext: IndexContext;\n    },\n    props: object,\n    getMetadata: ConnectorDescription['getMetadata'],\n    displayName: string\n  ) {\n    if (this.props.onSearchParameters) {\n      const searchState = this.props.searchState ? this.props.searchState : {};\n      this.props.onSearchParameters(\n        getSearchParameters,\n        context,\n        props,\n        searchState\n      );\n    }\n    if (this.props.widgetsCollector) {\n      const searchState = this.props.searchState ? this.props.searchState : {};\n      this.props.widgetsCollector({\n        getSearchParameters,\n        getMetadata,\n        context,\n        props,\n        searchState,\n        displayName,\n      });\n    }\n  }\n\n  onSearchForFacetValues(searchState: any) {\n    this.state.instantSearchManager.onSearchForFacetValues(searchState);\n  }\n\n  getKnownKeys() {\n    return this.state.instantSearchManager.getWidgetsIds();\n  }\n\n  render() {\n    if (Children.count(this.props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <InstantSearchProvider value={this.state.contextValue}>\n        {this.props.children}\n      </InstantSearchProvider>\n    );\n  }\n}\n\nexport default InstantSearch;\n","import createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\nimport { addQueryID, addAbsolutePositions } from '../core/utils';\n\nconst getId = () => 'query';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction getHits(searchResults) {\n  if (searchResults.results) {\n    if (\n      searchResults.results.hits &&\n      Array.isArray(searchResults.results.hits)\n    ) {\n      return addAbsolutePositions(\n        addQueryID(searchResults.results.hits, searchResults.results.queryID),\n        searchResults.results.hitsPerPage,\n        searchResults.results.page\n      );\n    } else {\n      return Object.keys(searchResults.results).reduce(\n        (hits, index) => [\n          ...hits,\n          {\n            index,\n            hits: addAbsolutePositions(\n              addQueryID(\n                searchResults.results[index].hits,\n                searchResults.results[index].queryID\n              ),\n              searchResults.results[index].hitsPerPage,\n              searchResults.results[index].page\n            ),\n          },\n        ],\n        []\n      );\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const nextValue = { [id]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectAutoComplete connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n * @name connectAutoComplete\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {function} refine - a function to change the query\n * @providedPropType {string} currentRefinement - the query to search for\n */\nexport default createConnector({\n  displayName: 'AlgoliaAutoComplete',\n  $$type: 'ais.autoComplete',\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      hits: getHits(searchResults),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { refineValue, getResults } from '../core/indexUtils';\n\nexport const getId = (props) => props.attributes[0];\n\nconst namespace = 'hierarchicalMenu';\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement || '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction transformValue(values) {\n  return values.reduce((acc, item) => {\n    if (item.isRefined) {\n      acc.push({\n        label: item.name,\n        // If dealing with a nested \"items\", \"value\" is equal to the previous value concatenated with the current value\n        // If dealing with the first level, \"value\" is equal to the current value\n        value: item.escapedValue,\n      });\n      // Create a variable in order to keep the same acc for the recursion, otherwise \"reduce\" returns a new one\n      if (item.data) {\n        acc = acc.concat(transformValue(item.data, acc));\n      }\n    }\n    return acc;\n  }, []);\n}\n\n/**\n * The breadcrumb component is s a type of secondary navigation scheme that\n * reveals the user’s location in a website or web application.\n *\n * @name connectBreadcrumb\n * @requirements To use this widget, your attributes must be formatted in a specific way.\n * If you want for example to have a Breadcrumb of categories, objects in your index\n * should be formatted this way:\n *\n * ```json\n * {\n *   \"categories.lvl0\": \"products\",\n *   \"categories.lvl1\": \"products > fruits\",\n *   \"categories.lvl2\": \"products > fruits > citrus\"\n * }\n * ```\n *\n * It's also possible to provide more than one path for each level:\n *\n * ```json\n * {\n *   \"categories.lvl0\": [\"products\", \"goods\"],\n *   \"categories.lvl1\": [\"products > fruits\", \"goods > to eat\"]\n * }\n * ```\n *\n * All attributes passed to the `attributes` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n *\n * @kind connector\n * @propType {array.<string>} attributes - List of attributes to use to generate the hierarchy of the menu. See the example for the convention to follow.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {array.<{items: object, count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Breadcrumb can display.\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaBreadcrumb',\n  $$type: 'ais.breadcrumb',\n\n  propTypes: {\n    attributes: (props, propName, componentName) => {\n      const isNotString = (val) => typeof val !== 'string';\n      if (\n        !Array.isArray(props[propName]) ||\n        props[propName].some(isNotString) ||\n        props[propName].length < 1\n      ) {\n        return new Error(\n          `Invalid prop ${propName} supplied to ${componentName}. Expected an Array of Strings`\n        );\n      }\n      return undefined;\n    },\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const id = getId(props);\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const isFacetPresent =\n      Boolean(results) && Boolean(results.getFacetByName(id));\n\n    if (!isFacetPresent) {\n      return {\n        items: [],\n        canRefine: false,\n      };\n    }\n\n    const values = results.getFacetValues(id);\n\n    const items = values.data ? transformValue(values.data) : [];\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      canRefine: transformedItems.length > 0,\n      items: transformedItems,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n});\n","import { objectHasKeys } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  getResults,\n  getCurrentRefinementValue,\n  getIndexId,\n  refineValue,\n  cleanUpValue,\n} from '../core/indexUtils';\n\n/**\n * The GeoSearch connector provides the logic to build a widget that will display the results on a map.\n * It also provides a way to search for results based on their position. The connector provides function to manage the search experience (search on map interaction).\n * @name connectGeoSearch\n * @kind connector\n * @requirements Note that the GeoSearch connector uses the [geosearch](https://www.algolia.com/doc/guides/searching/geo-search) capabilities of Algolia.\n * Your hits **must** have a `_geoloc` attribute in order to be passed to the rendering function. Currently, the feature is not compatible with multiple values in the `_geoloc` attribute\n * (e.g. a restaurant with multiple locations). In that case you can duplicate your records and use the [distinct](https://www.algolia.com/doc/guides/ranking/distinct) feature of Algolia to only retrieve unique results.\n * @propType {{ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } }} [defaultRefinement] - Default search state of the widget containing the bounds for the map\n * @providedPropType {function({ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } })} refine - a function to toggle the refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {array.<object>} hits - the records that matched the search\n * @providedPropType {boolean} isRefinedWithMap - true if the current refinement is set with the map bounds\n * @providedPropType {{ northEast: { lat: number, lng: number }, southWest: { lat: number, lng: number } }} [currentRefinement] - the refinement currently applied\n * @providedPropType {{ lat: number, lng: number }} [position] - the position of the search\n */\n\n// To control the map with an external widget the other widget\n// **must** write the value in the attribute `aroundLatLng`\nconst getBoundingBoxId = () => 'boundingBox';\nconst getAroundLatLngId = () => 'aroundLatLng';\nconst getConfigureAroundLatLngId = () => 'configure.aroundLatLng';\n\nconst currentRefinementToString = (currentRefinement) =>\n  [\n    currentRefinement.northEast.lat,\n    currentRefinement.northEast.lng,\n    currentRefinement.southWest.lat,\n    currentRefinement.southWest.lng,\n  ].join();\n\nconst stringToCurrentRefinement = (value) => {\n  const values = value.split(',');\n\n  return {\n    northEast: {\n      lat: parseFloat(values[0]),\n      lng: parseFloat(values[1]),\n    },\n    southWest: {\n      lat: parseFloat(values[2]),\n      lng: parseFloat(values[3]),\n    },\n  };\n};\n\nconst latLngRegExp = /^(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)$/;\nconst stringToPosition = (value) => {\n  const pattern = value.match(latLngRegExp);\n\n  return {\n    lat: parseFloat(pattern[1]),\n    lng: parseFloat(pattern[2]),\n  };\n};\n\nconst getCurrentRefinement = (props, searchState, context) => {\n  const refinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    getBoundingBoxId(),\n    {}\n  );\n\n  if (!objectHasKeys(refinement)) {\n    return;\n  }\n\n  // eslint-disable-next-line consistent-return\n  return {\n    northEast: {\n      lat: parseFloat(refinement.northEast.lat),\n      lng: parseFloat(refinement.northEast.lng),\n    },\n    southWest: {\n      lat: parseFloat(refinement.southWest.lat),\n      lng: parseFloat(refinement.southWest.lng),\n    },\n  };\n};\n\nconst getCurrentPosition = (props, searchState, context) => {\n  const { defaultRefinement, ...propsWithoutDefaultRefinement } = props;\n\n  const aroundLatLng = getCurrentRefinementValue(\n    propsWithoutDefaultRefinement,\n    searchState,\n    context,\n    getAroundLatLngId()\n  );\n\n  if (!aroundLatLng) {\n    // Fallback on `configure.aroundLatLng`\n    const configureAroundLatLng = getCurrentRefinementValue(\n      propsWithoutDefaultRefinement,\n      searchState,\n      context,\n      getConfigureAroundLatLngId()\n    );\n\n    return configureAroundLatLng && stringToPosition(configureAroundLatLng);\n  }\n\n  return aroundLatLng;\n};\n\nconst refine = (searchState, nextValue, context) => {\n  const resetPage = true;\n  const nextRefinement = {\n    [getBoundingBoxId()]: nextValue,\n  };\n\n  return refineValue(searchState, nextRefinement, context, resetPage);\n};\n\nexport default createConnector({\n  displayName: 'AlgoliaGeoSearch',\n  $$type: 'ais.geoSearch',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n\n    const results = getResults(searchResults, context);\n\n    // We read it from both because the SearchParameters & the searchState are not always\n    // in sync. When we set the refinement the searchState is used but when we clear the refinement\n    // the SearchParameters is used. In the first case when we render, the results are not there\n    // so we can't find the value from the results. The most up to date value is the searchState.\n    // But when we clear the refinement the searchState is immediately cleared even when the items\n    // retrieved are still the one from the previous query with the bounding box. It leads to some\n    // issue with the position of the map. We should rely on 1 source of truth or at least always\n    // be sync.\n\n    const currentRefinementFromSearchState = getCurrentRefinement(\n      props,\n      searchState,\n      context\n    );\n\n    const currentRefinementFromSearchParameters =\n      (results &&\n        results._state.insideBoundingBox &&\n        stringToCurrentRefinement(results._state.insideBoundingBox)) ||\n      undefined;\n\n    const currentPositionFromSearchState = getCurrentPosition(\n      props,\n      searchState,\n      context\n    );\n\n    const currentPositionFromSearchParameters =\n      (results &&\n        results._state.aroundLatLng &&\n        stringToPosition(results._state.aroundLatLng)) ||\n      undefined;\n\n    const currentRefinement =\n      currentRefinementFromSearchState || currentRefinementFromSearchParameters;\n\n    const position =\n      currentPositionFromSearchState || currentPositionFromSearchParameters;\n\n    return {\n      hits: !results ? [] : results.hits.filter((_) => Boolean(_._geoloc)),\n      isRefinedWithMap: Boolean(currentRefinement),\n      currentRefinement,\n      position,\n    };\n  },\n\n  refine(props, searchState, nextValue) {\n    return refine(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!currentRefinement) {\n      return searchParameters;\n    }\n\n    return searchParameters.setQueryParameter(\n      'insideBoundingBox',\n      currentRefinementToString(currentRefinement)\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getBoundingBoxId()\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const items = [];\n    const id = getBoundingBoxId();\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n    const index = getIndexId(context);\n    const nextRefinement = {};\n    const currentRefinement = getCurrentRefinement(props, searchState, context);\n\n    if (currentRefinement) {\n      items.push({\n        label: `${id}: ${currentRefinementToString(currentRefinement)}`,\n        value: (nextState) => refine(nextState, nextRefinement, context),\n        currentRefinement,\n      });\n    }\n\n    return {\n      id,\n      index,\n      items,\n    };\n  },\n\n  shouldComponentUpdate() {\n    return true;\n  },\n});\n","import PropTypes from 'prop-types';\nimport algoliasearchHelper from 'algoliasearch-helper';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\nimport { unescapeFacetValue } from '../core/utils';\n\nexport const getId = (props) => props.attributes[0];\n\nconst namespace = 'hierarchicalMenu';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    null\n  );\n\n  if (currentRefinement === '') {\n    return null;\n  }\n  return currentRefinement;\n}\n\nfunction getValue(value, props, searchState, context) {\n  const { id, attributes, separator, rootPath, showParentLevel } = props;\n\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  let nextRefinement;\n\n  if (currentRefinement === null) {\n    nextRefinement = value;\n  } else {\n    const tmpSearchParameters = new algoliasearchHelper.SearchParameters({\n      hierarchicalFacets: [\n        {\n          name: id,\n          attributes,\n          separator,\n          rootPath,\n          showParentLevel,\n        },\n      ],\n    });\n\n    nextRefinement = tmpSearchParameters\n      .toggleHierarchicalFacetRefinement(id, currentRefinement)\n      .toggleHierarchicalFacetRefinement(id, value)\n      .getHierarchicalRefinement(id)[0];\n  }\n\n  return nextRefinement;\n}\n\nfunction transformValue(value, props, searchState, context) {\n  return value.map((v) => ({\n    label: v.name,\n    value: getValue(v.escapedValue, props, searchState, context),\n    count: v.count,\n    isRefined: v.isRefined,\n    items: v.data && transformValue(v.data, props, searchState, context),\n  }));\n}\n\nconst truncate = (items = [], limit = 10) =>\n  items.slice(0, limit).map((item = {}) =>\n    Array.isArray(item.items)\n      ? {\n          ...item,\n          items: truncate(item.items, limit),\n        }\n      : item\n  );\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement || '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nconst sortBy = ['name:asc'];\n\n/**\n * connectHierarchicalMenu connector provides the logic to build a widget that will\n * give the user the ability to explore a tree-like structure.\n * This is commonly used for multi-level categorization of products on e-commerce\n * websites. From a UX point of view, we suggest not displaying more than two levels deep.\n * @name connectHierarchicalMenu\n * @requirements To use this widget, your attributes must be formatted in a specific way.\n * If you want for example to have a hierarchical menu of categories, objects in your index\n * should be formatted this way:\n *\n * ```json\n * {\n *   \"categories.lvl0\": \"products\",\n *   \"categories.lvl1\": \"products > fruits\",\n *   \"categories.lvl2\": \"products > fruits > citrus\"\n * }\n * ```\n *\n * It's also possible to provide more than one path for each level:\n *\n * ```json\n * {\n *   \"categories.lvl0\": [\"products\", \"goods\"],\n *   \"categories.lvl1\": [\"products > fruits\", \"goods > to eat\"]\n * }\n * ```\n *\n * All attributes passed to the `attributes` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n *\n * @kind connector\n * @propType {array.<string>} attributes - List of attributes to use to generate the hierarchy of the menu. See the example for the convention to follow.\n * @propType {string} [defaultRefinement] - the item value selected by default\n * @propType {boolean} [showMore=false] - Flag to activate the show more button, for toggling the number of items between limit and showMoreLimit.\n * @propType {number} [limit=10] -  The maximum number of items displayed.\n * @propType {number} [showMoreLimit=20] -  The maximum number of items displayed when the user triggers the show more. Not considered if `showMore` is false.\n * @propType {string} [separator='>'] -  Specifies the level separator used in the data.\n * @propType {string} [rootPath=null] - The path to use if the first level is not the root level.\n * @propType {boolean} [showParentLevel=true] - Flag to set if the parent level should be displayed.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{items: object, count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the HierarchicalMenu can display. items has the same shape as parent items.\n */\nexport default createConnector({\n  displayName: 'AlgoliaHierarchicalMenu',\n  $$type: 'ais.hierarchicalMenu',\n\n  propTypes: {\n    attributes: (props, propName, componentName) => {\n      const isNotString = (val) => typeof val !== 'string';\n      if (\n        !Array.isArray(props[propName]) ||\n        props[propName].some(isNotString) ||\n        props[propName].length < 1\n      ) {\n        return new Error(\n          `Invalid prop ${propName} supplied to ${componentName}. Expected an Array of Strings`\n        );\n      }\n      return undefined;\n    },\n    separator: PropTypes.string,\n    rootPath: PropTypes.string,\n    showParentLevel: PropTypes.bool,\n    defaultRefinement: PropTypes.string,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    transformItems: PropTypes.func,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    separator: ' > ',\n    rootPath: null,\n    showParentLevel: true,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { showMore, limit, showMoreLimit, facetOrdering } = props;\n    const id = getId(props);\n\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const isFacetPresent =\n      Boolean(results) && Boolean(results.getFacetByName(id));\n\n    if (!isFacetPresent) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        canRefine: false,\n      };\n    }\n    const itemsLimit = showMore ? showMoreLimit : limit;\n    const value = results.getFacetValues(id, { sortBy, facetOrdering });\n    const items = value.data\n      ? transformValue(value.data, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        })\n      : [];\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n    return {\n      items: truncate(transformedItems, itemsLimit),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const {\n      attributes,\n      separator,\n      rootPath,\n      showParentLevel,\n      showMore,\n      limit,\n      showMoreLimit,\n      contextValue,\n    } = props;\n\n    const id = getId(props);\n    const itemsLimit = showMore ? showMoreLimit : limit;\n\n    searchParameters = searchParameters\n      .addHierarchicalFacet({\n        name: id,\n        attributes,\n        separator,\n        rootPath,\n        showParentLevel,\n      })\n      .setQueryParameters({\n        maxValuesPerFacet: Math.max(\n          searchParameters.maxValuesPerFacet || 0,\n          itemsLimit\n        ),\n      });\n\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.toggleHierarchicalFacetRefinement(\n        id,\n        currentRefinement\n      );\n    }\n\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const rootAttribute = props.attributes[0];\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const items = !currentRefinement\n      ? []\n      : [\n          {\n            label: `${rootAttribute}: ${unescapeFacetValue(currentRefinement)}`,\n            attribute: rootAttribute,\n            value: (nextState) =>\n              refine(props, nextState, '', {\n                ais: props.contextValue,\n                multiIndexContext: props.indexContextValue,\n              }),\n            currentRefinement,\n          },\n        ];\n\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\n\n/**\n * connectCurrentRefinements connector provides the logic to build a widget that will\n * give the user the ability to remove all or some of the filters that were\n * set.\n * @name connectCurrentRefinements\n * @kind connector\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @propType {function} [clearsQuery=false] - Pass true to also clear the search query\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {array.<{label: string, attribute: string, currentRefinement: string || object, items: array, value: function}>} items - all the filters, the `value` is to pass to the `refine` function for removing all currentrefinements, `label` is for the display. When existing several refinements for the same atribute name, then you get a nested `items` object that contains a `label` and a `value` function to use to remove a single filter. `attribute` and `currentRefinement` are metadata containing row values.\n * @providedPropType {string} query - the search query\n */\nexport default createConnector({\n  displayName: 'AlgoliaCurrentRefinements',\n  $$type: 'ais.currentRefinements',\n\n  propTypes: {\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults, metadata) {\n    const items = metadata.reduce((res, meta) => {\n      if (typeof meta.items !== 'undefined') {\n        if (!props.clearsQuery && meta.id === 'query') {\n          return res;\n        } else {\n          if (\n            props.clearsQuery &&\n            meta.id === 'query' &&\n            meta.items[0].currentRefinement === ''\n          ) {\n            return res;\n          }\n          return res.concat(\n            meta.items.map((item) => ({\n              ...item,\n              id: meta.id,\n              index: meta.index,\n            }))\n          );\n        }\n      }\n      return res;\n    }, []);\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, items) {\n    // `value` corresponds to our internal clear function computed in each connector metadata.\n    const refinementsToClear =\n      items instanceof Array ? items.map((item) => item.value) : [items];\n    return refinementsToClear.reduce((res, clear) => clear(res), searchState);\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { HIGHLIGHT_TAGS, parseAlgoliaHit } from '../core/highlight';\n\nconst highlight = ({\n  attribute,\n  hit,\n  highlightProperty,\n  preTag = HIGHLIGHT_TAGS.highlightPreTag,\n  postTag = HIGHLIGHT_TAGS.highlightPostTag,\n}) =>\n  parseAlgoliaHit({\n    attribute,\n    highlightProperty,\n    hit,\n    preTag,\n    postTag,\n  });\n\n/**\n * connectHighlight connector provides the logic to create an highlighter\n * component that will retrieve, parse and render an highlighted attribute\n * from an Algolia hit.\n * @name connectHighlight\n * @kind connector\n * @category connector\n * @providedPropType {function} highlight - function to retrieve and parse an attribute from a hit. It takes a configuration object with 3 attributes: `highlightProperty` which is the property that contains the highlight structure from the records, `attribute` which is the name of the attribute (it can be either a string or an array of strings) to look for and `hit` which is the hit from Algolia. It returns an array of objects `{value: string, isHighlighted: boolean}`. If the element that corresponds to the attribute is an array of strings, it will return a nested array of objects.\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits, connectHighlight } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const CustomHighlight = connectHighlight(\n *   ({ highlight, attribute, hit, highlightProperty }) => {\n *     const highlights = highlight({\n *       highlightProperty: '_highlightResult',\n *       attribute,\n *       hit\n *     });\n *\n *     return highlights.map(part => part.isHighlighted ? (\n *       <mark>{part.value}</mark>\n *     ) : (\n *       <span>{part.value}</span>\n *     ));\n *   }\n * );\n *\n * const Hit = ({ hit }) => (\n *   <p>\n *     <CustomHighlight attribute=\"name\" hit={hit} />\n *   </p>\n * );\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <SearchBox defaultRefinement=\"pho\" />\n *     <Hits hitComponent={Hit} />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHighlighter',\n  $$type: 'ais.highlighter',\n\n  propTypes: {},\n\n  getProvidedProps() {\n    return { highlight };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  $$type: 'ais.hits',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (!results) {\n      return { hits: [] };\n    }\n    const hitsWithPositions = addAbsolutePositions(\n      results.hits,\n      results.hitsPerPage,\n      results.page\n    );\n    const hitsWithPositionsAndQueryID = addQueryID(\n      hitsWithPositions,\n      results.queryID\n    );\n    return { hits: hitsWithPositionsAndQueryID };\n  },\n\n  /*\n   * Hits needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters(searchParameters) {\n    return searchParameters;\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'hitsPerPage';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    null\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\n/**\n * connectHitsPerPage connector provides the logic to create connected\n * components that will allow a user to choose to display more or less results from Algolia.\n * @name connectHitsPerPage\n * @kind connector\n * @propType {number} defaultRefinement - The number of items selected by default\n * @propType {{value: number, label: string}[]} items - List of hits per page options.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: number}>} items - the list of items the HitsPerPage can display. If no label provided, the value will be displayed.\n */\nexport default createConnector({\n  displayName: 'AlgoliaHitsPerPage',\n  $$type: 'ais.hitsPerPage',\n\n  propTypes: {\n    defaultRefinement: PropTypes.number.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n        value: PropTypes.number.isRequired,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = props.items.map((item) =>\n      item.value === currentRefinement\n        ? { ...item, isRefined: true }\n        : { ...item, isRefined: false }\n    );\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const id = getId();\n    const nextValue = { [id]: nextRefinement };\n    const resetPage = true;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setHitsPerPage(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import isEqual from 'react-fast-compare';\n\nimport createConnector from '../core/createConnector';\nimport {\n  getCurrentRefinementValue,\n  refineValue,\n  getResults,\n} from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const page = 1;\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    page\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\nfunction getStateWithoutPage(state) {\n  const { page, ...rest } = state || {};\n  return rest;\n}\n\nfunction getInMemoryCache() {\n  let cachedHits = undefined;\n  let cachedState = undefined;\n  return {\n    read({ state }) {\n      return isEqual(cachedState, getStateWithoutPage(state))\n        ? cachedHits\n        : null;\n    },\n    write({ state, hits }) {\n      cachedState = getStateWithoutPage(state);\n      cachedHits = hits;\n    },\n  };\n}\n\nfunction extractHitsFromCachedHits(cachedHits) {\n  return Object.keys(cachedHits)\n    .map(Number)\n    .sort((a, b) => a - b)\n    .reduce((acc, page) => {\n      return acc.concat(cachedHits[page]);\n    }, []);\n}\n\n/**\n * InfiniteHits connector provides the logic to create connected\n * components that will render an continuous list of results retrieved from\n * Algolia. This connector provides a function to load more results.\n * @name connectInfiniteHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {boolean} hasMore - indicates if there are more pages to load\n * @providedPropType {function} refine - call to load more results\n */\nexport default createConnector({\n  displayName: 'AlgoliaInfiniteHits',\n  $$type: 'ais.infiniteHits',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return {\n        hits: [],\n        hasPrevious: false,\n        hasMore: false,\n        refine: () => {},\n        refinePrevious: () => {},\n        refineNext: () => {},\n      };\n    }\n\n    const { page, hits, hitsPerPage, nbPages, _state: state } = results;\n\n    this._cache = props.cache ? props.cache : this._cache || getInMemoryCache();\n    const cachedHits = this._cache.read({ state }) || {};\n\n    const hitsWithPositions = addAbsolutePositions(hits, hitsPerPage, page);\n    const hitsWithPositionsAndQueryID = addQueryID(\n      hitsWithPositions,\n      results.queryID\n    );\n\n    cachedHits[page] = hitsWithPositionsAndQueryID;\n    this._cache.write({ state, hits: cachedHits });\n\n    /*\n      Math.min() and Math.max() returns Infinity or -Infinity when no argument is given.\n      But there is always something in this point because of `cachedHits[page]`.\n    */\n    const firstReceivedPage = Math.min(...Object.keys(cachedHits).map(Number));\n    const lastReceivedPage = Math.max(...Object.keys(cachedHits).map(Number));\n\n    const hasPrevious = firstReceivedPage > 0;\n    const lastPageIndex = nbPages - 1;\n    const hasMore = lastReceivedPage < lastPageIndex;\n    const refinePrevious = (event) => this.refine(event, firstReceivedPage - 1);\n    const refineNext = (event) => this.refine(event, lastReceivedPage + 1);\n\n    return {\n      hits: extractHitsFromCachedHits(cachedHits),\n      hasPrevious,\n      hasMore,\n      refinePrevious,\n      refineNext,\n    };\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameters({\n      page:\n        getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }) - 1,\n    });\n  },\n\n  refine(props, searchState, event, index) {\n    const id = getId();\n    const nextValue = { [id]: index + 1 };\n    const resetPage = false;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  getIndexId,\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\nimport { unescapeFacetValue } from '../core/utils';\n\nconst namespace = 'menu';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    null\n  );\n\n  if (currentRefinement === '') {\n    return null;\n  }\n  return currentRefinement;\n}\n\nfunction getValue(value, props, searchState, context) {\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  return value === currentRefinement ? '' : value;\n}\n\nfunction getLimit({ showMore, limit, showMoreLimit }) {\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement ? nextRefinement : '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nconst defaultSortBy = ['count:desc', 'name:asc'];\n\n/**\n * connectMenu connector provides the logic to build a widget that will\n * give the user the ability to choose a single value for a specific facet.\n * @name connectMenu\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of diplayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string} [defaultRefinement] - the value of the item selected by default\n * @propType {boolean} [searchable=false] - allow search inside values\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Menu can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n */\nexport default createConnector({\n  displayName: 'AlgoliaMenu',\n  $$type: 'ais.menu',\n\n  propTypes: {\n    attribute: PropTypes.string.isRequired,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.string,\n    transformItems: PropTypes.func,\n    searchable: PropTypes.bool,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(\n    props,\n    searchState,\n    searchResults,\n    meta,\n    searchForFacetValuesResults\n  ) {\n    const { attribute, searchable, indexContextValue, facetOrdering } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const canRefine =\n      Boolean(results) && Boolean(results.getFacetByName(attribute));\n\n    const isFromSearch = Boolean(\n      searchForFacetValuesResults &&\n        searchForFacetValuesResults[attribute] &&\n        searchForFacetValuesResults.query !== ''\n    );\n\n    // Search For Facet Values is not available with derived helper (used for multi index search)\n    if (searchable && indexContextValue) {\n      throw new Error(\n        'react-instantsearch: searching in *List is not available when used inside a' +\n          ' multi index context'\n      );\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        isFromSearch,\n        searchable,\n        canRefine,\n      };\n    }\n\n    let items;\n    if (isFromSearch) {\n      items = searchForFacetValuesResults[attribute].map((v) => ({\n        label: v.value,\n        value: getValue(v.escapedValue, props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        _highlightResult: { label: { value: v.highlighted } },\n        count: v.count,\n        isRefined: v.isRefined,\n      }));\n    } else {\n      items = results\n        .getFacetValues(attribute, {\n          sortBy: searchable ? undefined : defaultSortBy,\n          facetOrdering,\n        })\n        .map((v) => ({\n          label: v.name,\n          value: getValue(v.escapedValue, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n          count: v.count,\n          isRefined: v.isRefined,\n        }));\n    }\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isFromSearch,\n      searchable,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props),\n    };\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute } = props;\n\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(\n        searchParameters.maxValuesPerFacet || 0,\n        getLimit(props)\n      ),\n    });\n\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.addDisjunctiveFacetRefinement(\n        attribute,\n        currentRefinement\n      );\n    }\n\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${props.attribute}: ${unescapeFacetValue(\n                  currentRefinement\n                )}`,\n                attribute: props.attribute,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { find } from '../core/utils';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction stringifyItem(item) {\n  if (typeof item.start === 'undefined' && typeof item.end === 'undefined') {\n    return '';\n  }\n  const start = typeof item.start !== 'undefined' ? item.start : '';\n  const end = typeof item.end !== 'undefined' ? item.end : '';\n  return `${start}:${end}`;\n}\n\nfunction parseItem(value) {\n  if (value.length === 0) {\n    return { start: null, end: null };\n  }\n  const [startStr, endStr] = value.split(':');\n  return {\n    start: startStr.length > 0 ? parseFloat(startStr) : null,\n    end: endStr.length > 0 ? parseFloat(endStr) : null,\n  };\n}\n\nconst namespace = 'multiRange';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    '',\n    (currentRefinement) => {\n      if (currentRefinement === '') {\n        return '';\n      }\n      return currentRefinement;\n    }\n  );\n}\n\nfunction isRefinementsRangeIncludesInsideItemRange(stats, start, end) {\n  return (\n    (stats.min >= start && stats.min <= end) ||\n    (stats.max >= start && stats.max <= end)\n  );\n}\n\nfunction isItemRangeIncludedInsideRefinementsRange(stats, start, end) {\n  return (\n    (start >= stats.min && start <= stats.max) ||\n    (end >= stats.min && end <= stats.max)\n  );\n}\n\nfunction itemHasRefinement(attribute, results, value) {\n  const stats = results.getFacetByName(attribute)\n    ? results.getFacetStats(attribute)\n    : null;\n  const range = value.split(':');\n  const start =\n    Number(range[0]) === 0 || value === ''\n      ? Number.NEGATIVE_INFINITY\n      : Number(range[0]);\n  const end =\n    Number(range[1]) === 0 || value === ''\n      ? Number.POSITIVE_INFINITY\n      : Number(range[1]);\n  return !(\n    Boolean(stats) &&\n    (isRefinementsRangeIncludesInsideItemRange(stats, start, end) ||\n      isItemRangeIncludedInsideRefinementsRange(stats, start, end))\n  );\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const nextValue = { [getId(props, searchState)]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\n/**\n * connectNumericMenu connector provides the logic to build a widget that will\n * give the user the ability to select a range value for a numeric attribute.\n * Ranges are defined statically.\n * @name connectNumericMenu\n * @requirements The attribute passed to the `attribute` prop must be holding numerical values.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the records\n * @propType {{label: string, start: number, end: number}[]} items - List of options. With a text label, and upper and lower bounds.\n * @propType {string} [defaultRefinement] - the value of the item selected by default, follow the shape of a `string` with a pattern of `'{start}:{end}'`.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to select a range.\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied.  follow the shape of a `string` with a pattern of `'{start}:{end}'` which corresponds to the current selected item. For instance, when the selected item is `{start: 10, end: 20}`, the searchState of the widget is `'10:20'`. When `start` isn't defined, the searchState of the widget is `':{end}'`, and the same way around when `end` isn't defined. However, when neither `start` nor `end` are defined, the searchState is an empty string.\n * @providedPropType {array.<{isRefined: boolean, label: string, value: string, isRefined: boolean, noRefinement: boolean}>} items - the list of ranges the NumericMenu can display.\n */\nexport default createConnector({\n  displayName: 'AlgoliaNumericMenu',\n  $$type: 'ais.numericMenu',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.node,\n        start: PropTypes.number,\n        end: PropTypes.number,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const attribute = props.attribute;\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const items = props.items.map((item) => {\n      const value = stringifyItem(item);\n      return {\n        label: item.label,\n        value,\n        isRefined: value === currentRefinement,\n        noRefinement: results\n          ? itemHasRefinement(getId(props), results, value)\n          : false,\n      };\n    });\n\n    const stats =\n      results && results.getFacetByName(attribute)\n        ? results.getFacetStats(attribute)\n        : null;\n    const refinedItem = find(items, (item) => item.isRefined === true);\n    if (!items.some((item) => item.value === '')) {\n      items.push({\n        value: '',\n        isRefined: refinedItem === undefined,\n        noRefinement: !stats,\n        label: 'All',\n      });\n    }\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems,\n      currentRefinement,\n      canRefine:\n        transformedItems.length > 0 &&\n        transformedItems.some((item) => item.noRefinement === false),\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute } = props;\n    const { start, end } = parseItem(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    if (typeof start === 'number') {\n      searchParameters = searchParameters.addNumericRefinement(\n        attribute,\n        '>=',\n        start\n      );\n    }\n    if (typeof end === 'number') {\n      searchParameters = searchParameters.addNumericRefinement(\n        attribute,\n        '<=',\n        end\n      );\n    }\n    return searchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const value = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = [];\n    const index = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    if (value !== '') {\n      const { label } = find(\n        props.items,\n        (item) => stringifyItem(item) === value\n      );\n      items.push({\n        label: `${props.attribute}: ${label}`,\n        attribute: props.attribute,\n        currentRefinement: label,\n        value: (nextState) =>\n          refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n      });\n    }\n    return { id, index, items };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'page';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId();\n  const page = 1;\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    page\n  );\n\n  if (typeof currentRefinement === 'string') {\n    return parseInt(currentRefinement, 10);\n  }\n  return currentRefinement;\n}\n\nfunction refine(props, searchState, nextPage, context) {\n  const id = getId();\n  const nextValue = { [id]: nextPage };\n  const resetPage = false;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\n/**\n * connectPagination connector provides the logic to build a widget that will\n * let the user displays hits corresponding to a certain page.\n * @name connectPagination\n * @kind connector\n * @propType {boolean} [showFirst=true] - Display the first page link.\n * @propType {boolean} [showLast=false] - Display the last page link.\n * @propType {boolean} [showPrevious=true] - Display the previous page link.\n * @propType {boolean} [showNext=true] - Display the next page link.\n * @propType {number} [padding=3] - How many page links to display around the current page.\n * @propType {number} [totalPages=Infinity] - Maximum number of pages to display.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {number} nbPages - the total of existing pages\n * @providedPropType {number} currentRefinement - the page refinement currently applied\n */\nexport default createConnector({\n  displayName: 'AlgoliaPagination',\n  $$type: 'ais.pagination',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return null;\n    }\n\n    const nbPages = results.nbPages;\n    return {\n      nbPages,\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      canRefine: nbPages > 1,\n    };\n  },\n\n  refine(props, searchState, nextPage) {\n    return refine(props, searchState, nextPage, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setPage(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }) - 1\n    );\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import createConnector from '../core/createConnector';\n\n/**\n * connectPoweredBy connector provides the logic to build a widget that\n * will display a link to algolia.\n * @name connectPoweredBy\n * @kind connector\n * @providedPropType {string} url - the url to redirect to algolia\n */\nexport default createConnector({\n  displayName: 'AlgoliaPoweredBy',\n  $$type: 'ais.poweredBy',\n\n  getProvidedProps() {\n    const hostname =\n      typeof window === 'undefined' || typeof window.location === 'undefined'\n        ? ''\n        : window.location.hostname;\n\n    const url =\n      'https://www.algolia.com/?' +\n      'utm_source=react-instantsearch&' +\n      'utm_medium=website&' +\n      `utm_content=${hostname}&` +\n      'utm_campaign=poweredby';\n\n    return {\n      url,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\n\n/**\n * connectRange connector provides the logic to create connected\n * components that will give the ability for a user to refine results using\n * a numeric range.\n * @name connectRange\n * @kind connector\n * @requirements The attribute passed to the `attribute` prop must be present in “attributes for faceting”\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * The values inside the attribute must be JavaScript numbers (not strings).\n * @propType {string} attribute - Name of the attribute for faceting\n * @propType {{min?: number, max?: number}} [defaultRefinement] - Default searchState of the widget containing the start and the end of the range.\n * @propType {number} [min] - Minimum value. When this isn't set, the minimum value will be automatically computed by Algolia using the data in the index.\n * @propType {number} [max] - Maximum value. When this isn't set, the maximum value will be automatically computed by Algolia using the data in the index.\n * @propType {number} [precision=0] - Number of digits after decimal point to use.\n * @providedPropType {function} refine - a function to select a range.\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {number} min - the minimum value available.\n * @providedPropType {number} max - the maximum value available.\n * @providedPropType {number} precision - Number of digits after decimal point to use.\n */\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nconst namespace = 'range';\n\nfunction getCurrentRange(boundaries, stats, precision) {\n  const pow = Math.pow(10, precision);\n\n  let min;\n  if (typeof boundaries.min === 'number' && isFinite(boundaries.min)) {\n    min = boundaries.min;\n  } else if (typeof stats.min === 'number' && isFinite(stats.min)) {\n    min = stats.min;\n  } else {\n    min = undefined;\n  }\n\n  let max;\n  if (typeof boundaries.max === 'number' && isFinite(boundaries.max)) {\n    max = boundaries.max;\n  } else if (typeof stats.max === 'number' && isFinite(stats.max)) {\n    max = stats.max;\n  } else {\n    max = undefined;\n  }\n\n  return {\n    min: min !== undefined ? Math.floor(min * pow) / pow : min,\n    max: max !== undefined ? Math.ceil(max * pow) / pow : max,\n  };\n}\n\nfunction getCurrentRefinement(props, searchState, currentRange, context) {\n  const { min, max } = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    {}\n  );\n\n  const isFloatPrecision = Boolean(props.precision);\n\n  let nextMin = min;\n  if (typeof nextMin === 'string') {\n    nextMin = isFloatPrecision ? parseFloat(nextMin) : parseInt(nextMin, 10);\n  }\n\n  let nextMax = max;\n  if (typeof nextMax === 'string') {\n    nextMax = isFloatPrecision ? parseFloat(nextMax) : parseInt(nextMax, 10);\n  }\n\n  const refinement = {\n    min: nextMin,\n    max: nextMax,\n  };\n\n  const hasMinBound = props.min !== undefined;\n  const hasMaxBound = props.max !== undefined;\n\n  const hasMinRefinment = refinement.min !== undefined;\n  const hasMaxRefinment = refinement.max !== undefined;\n\n  if (hasMinBound && hasMinRefinment && refinement.min < currentRange.min) {\n    throw Error(\"You can't provide min value lower than range.\");\n  }\n\n  if (hasMaxBound && hasMaxRefinment && refinement.max > currentRange.max) {\n    throw Error(\"You can't provide max value greater than range.\");\n  }\n\n  if (hasMinBound && !hasMinRefinment) {\n    refinement.min = currentRange.min;\n  }\n\n  if (hasMaxBound && !hasMaxRefinment) {\n    refinement.max = currentRange.max;\n  }\n\n  return refinement;\n}\n\nfunction getCurrentRefinementWithRange(refinement, range) {\n  return {\n    min: refinement.min !== undefined ? refinement.min : range.min,\n    max: refinement.max !== undefined ? refinement.max : range.max,\n  };\n}\n\nfunction nextValueForRefinement(hasBound, isReset, range, value) {\n  let next;\n  if (!hasBound && range === value) {\n    next = undefined;\n  } else if (hasBound && isReset) {\n    next = range;\n  } else {\n    next = value;\n  }\n\n  return next;\n}\n\nfunction refine(props, searchState, nextRefinement, currentRange, context) {\n  const { min: nextMin, max: nextMax } = nextRefinement;\n  const { min: currentMinRange, max: currentMaxRange } = currentRange;\n\n  const isMinReset = nextMin === undefined || nextMin === '';\n  const isMaxReset = nextMax === undefined || nextMax === '';\n\n  const nextMinAsNumber = !isMinReset ? parseFloat(nextMin) : undefined;\n  const nextMaxAsNumber = !isMaxReset ? parseFloat(nextMax) : undefined;\n\n  const isNextMinValid = isMinReset || isFinite(nextMinAsNumber);\n  const isNextMaxValid = isMaxReset || isFinite(nextMaxAsNumber);\n\n  if (!isNextMinValid || !isNextMaxValid) {\n    throw Error(\"You can't provide non finite values to the range connector.\");\n  }\n\n  if (nextMinAsNumber < currentMinRange) {\n    throw Error(\"You can't provide min value lower than range.\");\n  }\n\n  if (nextMaxAsNumber > currentMaxRange) {\n    throw Error(\"You can't provide max value greater than range.\");\n  }\n\n  const id = getId(props);\n  const resetPage = true;\n  const nextValue = {\n    [id]: {\n      min: nextValueForRefinement(\n        props.min !== undefined,\n        isMinReset,\n        currentMinRange,\n        nextMinAsNumber\n      ),\n      max: nextValueForRefinement(\n        props.max !== undefined,\n        isMaxReset,\n        currentMaxRange,\n        nextMaxAsNumber\n      ),\n    },\n  };\n\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaRange',\n  $$type: 'ais.range',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    defaultRefinement: PropTypes.shape({\n      min: PropTypes.number,\n      max: PropTypes.number,\n    }),\n    min: PropTypes.number,\n    max: PropTypes.number,\n    precision: PropTypes.number,\n    header: PropTypes.node,\n    footer: PropTypes.node,\n  },\n\n  defaultProps: {\n    precision: 0,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { attribute, precision, min: minBound, max: maxBound } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const hasFacet = results && results.getFacetByName(attribute);\n    const stats = hasFacet ? results.getFacetStats(attribute) || {} : {};\n    const facetValues = hasFacet ? results.getFacetValues(attribute) : [];\n\n    const count = facetValues.map((v) => ({\n      value: v.name,\n      count: v.count,\n    }));\n\n    const { min: rangeMin, max: rangeMax } = getCurrentRange(\n      { min: minBound, max: maxBound },\n      stats,\n      precision\n    );\n\n    // The searchState is not always in sync with the helper state. For example\n    // when we set boundaries on the first render the searchState don't have\n    // the correct refinement. If this behavior change in the upcoming version\n    // we could store the range inside the searchState instead of rely on `this`.\n    this._currentRange = {\n      min: rangeMin,\n      max: rangeMax,\n    };\n\n    const currentRefinement = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    return {\n      min: rangeMin,\n      max: rangeMax,\n      canRefine: count.length > 0,\n      currentRefinement: getCurrentRefinementWithRange(\n        currentRefinement,\n        this._currentRange\n      ),\n      count,\n      precision,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, this._currentRange, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(params, props, searchState) {\n    const { attribute } = props;\n    const { min, max } = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    params = params.addDisjunctiveFacet(attribute);\n\n    if (min !== undefined) {\n      params = params.addNumericRefinement(attribute, '>=', min);\n    }\n\n    if (max !== undefined) {\n      params = params.addNumericRefinement(attribute, '<=', max);\n    }\n\n    return params;\n  },\n\n  getMetadata(props, searchState) {\n    const { min: minRange, max: maxRange } = this._currentRange;\n    const { min: minValue, max: maxValue } = getCurrentRefinement(\n      props,\n      searchState,\n      this._currentRange,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue }\n    );\n\n    const items = [];\n    const hasMin = minValue !== undefined;\n    const hasMax = maxValue !== undefined;\n    const shouldDisplayMinLabel = hasMin && minValue !== minRange;\n    const shouldDisplayMaxLabel = hasMax && maxValue !== maxRange;\n\n    if (shouldDisplayMinLabel || shouldDisplayMaxLabel) {\n      const fragments = [\n        hasMin ? `${minValue} <= ` : '',\n        props.attribute,\n        hasMax ? ` <= ${maxValue}` : '',\n      ];\n\n      items.push({\n        label: fragments.join(''),\n        attribute: props.attribute,\n        value: (nextState) =>\n          refine(props, nextState, {}, this._currentRange, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n        currentRefinement: getCurrentRefinementWithRange(\n          { min: minValue, max: maxValue },\n          { min: minRange, max: maxRange }\n        ),\n      });\n    }\n\n    return {\n      id: getId(props),\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n} from '../core/indexUtils';\nimport { unescapeFacetValue } from '../core/utils';\n\nconst namespace = 'refinementList';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    []\n  );\n\n  if (typeof currentRefinement !== 'string') {\n    return currentRefinement;\n  }\n\n  if (currentRefinement) {\n    return [currentRefinement];\n  }\n\n  return [];\n}\n\nfunction getValue(value, props, searchState, context) {\n  const currentRefinement = getCurrentRefinement(props, searchState, context);\n  const isAnewValue = currentRefinement.indexOf(value) === -1;\n  const nextRefinement = isAnewValue\n    ? currentRefinement.concat([value]) // cannot use .push(), it mutates\n    : currentRefinement.filter((selectedValue) => selectedValue !== value); // cannot use .splice(), it mutates\n  return nextRefinement;\n}\n\nfunction getLimit({ showMore, limit, showMoreLimit }) {\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  // Setting the value to an empty string ensures that it is persisted in\n  // the URL as an empty value.\n  // This is necessary in the case where `defaultRefinement` contains one\n  // item and we try to deselect it. `nextSelected` would be an empty array,\n  // which would not be persisted to the URL.\n  // {foo: ['bar']} => \"foo[0]=bar\"\n  // {foo: []} => \"\"\n  const nextValue = { [id]: nextRefinement.length > 0 ? nextRefinement : '' };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n/**\n * connectRefinementList connector provides the logic to build a widget that will\n * give the user the ability to choose multiple values for a specific facet.\n * @name connectRefinementList\n * @kind connector\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [searchable=false] - allow search inside values\n * @propType {string} [operator=or] - How to apply the refinements. Possible values: 'or' or 'and'.\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of displayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string[]} defaultRefinement - the values of the items selected by default. The searchState of this widget takes the form of a list of `string`s, which correspond to the values of all selected refinements. However, when there are no refinements selected, the value of the searchState is an empty string.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the RefinementList can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n * @providedPropType {boolean} canRefine - a boolean that says whether you can refine\n */\n\nconst sortBy = ['isRefined', 'count:desc', 'name:asc'];\nexport default createConnector({\n  displayName: 'AlgoliaRefinementList',\n  $$type: 'ais.refinementList',\n\n  propTypes: {\n    id: PropTypes.string,\n    attribute: PropTypes.string.isRequired,\n    operator: PropTypes.oneOf(['and', 'or']),\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    ),\n    searchable: PropTypes.bool,\n    transformItems: PropTypes.func,\n    facetOrdering: PropTypes.bool,\n  },\n\n  defaultProps: {\n    operator: 'or',\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true,\n  },\n\n  getProvidedProps(\n    props,\n    searchState,\n    searchResults,\n    metadata,\n    searchForFacetValuesResults\n  ) {\n    const { attribute, searchable, indexContextValue, facetOrdering } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const canRefine =\n      Boolean(results) && Boolean(results.getFacetByName(attribute));\n\n    const isFromSearch = Boolean(\n      searchForFacetValuesResults &&\n        searchForFacetValuesResults[attribute] &&\n        searchForFacetValuesResults.query !== ''\n    );\n\n    // Search For Facet Values is not available with derived helper (used for multi index search)\n    if (searchable && indexContextValue) {\n      throw new Error(\n        'react-instantsearch: searching in *List is not available when used inside a' +\n          ' multi index context'\n      );\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue,\n        }),\n        canRefine,\n        isFromSearch,\n        searchable,\n      };\n    }\n\n    const items = isFromSearch\n      ? searchForFacetValuesResults[attribute].map((v) => ({\n          label: v.value,\n          value: getValue(v.escapedValue, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n          _highlightResult: { label: { value: v.highlighted } },\n          count: v.count,\n          isRefined: v.isRefined,\n        }))\n      : results\n          .getFacetValues(attribute, { sortBy, facetOrdering })\n          .map((v) => ({\n            label: v.name,\n            value: getValue(v.escapedValue, props, searchState, {\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            }),\n            count: v.count,\n            isRefined: v.isRefined,\n          }));\n\n    const transformedItems = props.transformItems\n      ? props.transformItems(items)\n      : items;\n\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isFromSearch,\n      searchable,\n      canRefine: transformedItems.length > 0,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props),\n    };\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute, operator } = props;\n\n    const addKey = operator === 'and' ? 'addFacet' : 'addDisjunctiveFacet';\n    const addRefinementKey = `${addKey}Refinement`;\n\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(\n        searchParameters.maxValuesPerFacet || 0,\n        getLimit(props)\n      ),\n    });\n\n    searchParameters = searchParameters[addKey](attribute);\n\n    return getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    }).reduce(\n      (res, val) => res[addRefinementKey](attribute, val),\n      searchParameters\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const context = {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    };\n    return {\n      id,\n      index: getIndexId(context),\n      items:\n        getCurrentRefinement(props, searchState, context).length > 0\n          ? [\n              {\n                attribute: props.attribute,\n                label: `${props.attribute}: `,\n                currentRefinement: getCurrentRefinement(\n                  props,\n                  searchState,\n                  context\n                ),\n                value: (nextState) => refine(props, nextState, [], context),\n                items: getCurrentRefinement(props, searchState, context).map(\n                  (item) => ({\n                    label: unescapeFacetValue(`${item}`),\n                    value: (nextState) => {\n                      const nextSelectedItems = getCurrentRefinement(\n                        props,\n                        nextState,\n                        context\n                      ).filter((other) => other !== item);\n                      return refine(\n                        props,\n                        searchState,\n                        nextSelectedItems,\n                        context\n                      );\n                    },\n                  })\n                ),\n              },\n            ]\n          : [],\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  getCurrentRefinementValue,\n  hasMultipleIndices,\n  getIndexId,\n} from '../core/indexUtils';\nimport { shallowEqual, omit } from '../core/utils';\n\n/**\n * connectScrollTo connector provides the logic to build a widget that will\n * let the page scroll to a certain point.\n * @name connectScrollTo\n * @kind connector\n * @propType {string} [scrollOn=\"page\"] - Widget searchState key on which to listen for changes, default to the pagination widget.\n * @providedPropType {any} value - the current refinement applied to the widget listened by scrollTo\n * @providedPropType {boolean} hasNotChanged - indicates whether the refinement came from the scrollOn argument (for instance page by default)\n */\nexport default createConnector({\n  displayName: 'AlgoliaScrollTo',\n  $$type: 'ais.scrollTo',\n\n  propTypes: {\n    scrollOn: PropTypes.string,\n  },\n\n  defaultProps: {\n    scrollOn: 'page',\n  },\n\n  getProvidedProps(props, searchState) {\n    const id = props.scrollOn;\n    const value = getCurrentRefinementValue(\n      props,\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      id,\n      null\n    );\n\n    if (!this._prevSearchState) {\n      this._prevSearchState = {};\n    }\n\n    // Get the subpart of the state that interest us\n    if (\n      hasMultipleIndices({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    ) {\n      searchState = searchState.indices\n        ? searchState.indices[\n            getIndexId({\n              ais: props.contextValue,\n              multiIndexContext: props.indexContextValue,\n            })\n          ]\n        : {};\n    }\n\n    // if there is a change in the app that has been triggered by another element\n    // than \"props.scrollOn (id) or the Configure widget, we need to keep track of\n    // the search state to know if there's a change in the app that was not triggered\n    // by the props.scrollOn (id) or the Configure widget. This is useful when\n    // using ScrollTo in combination of Pagination. As pagination can be change\n    // by every widget, we want to scroll only if it cames from the pagination\n    // widget itself. We also remove the configure key from the search state to\n    // do this comparison because for now configure values are not present in the\n    // search state before a first refinement has been made and will false the results.\n    // See: https://github.com/algolia/react-instantsearch/issues/164\n    const cleanedSearchState = omit(searchState, ['configure', id]);\n\n    const hasNotChanged = shallowEqual(\n      this._prevSearchState,\n      cleanedSearchState\n    );\n\n    this._prevSearchState = cleanedSearchState;\n\n    return { value, hasNotChanged };\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId(props);\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const nextValue = { [id]: nextRefinement };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  $$type: 'ais.searchBox',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isSearchStalled: searchResults.isSearchStalled,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${id}: ${currentRefinement}`,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","import type { ConnectedProps } from '../core/createConnector';\nimport createConnector from '../core/createConnector';\nimport {\n  refineValue,\n  getCurrentRefinementValue,\n  getResults,\n  // @ts-ignore\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'relevancyStrictness';\n}\n\nfunction getCurrentRefinement(\n  props: ConnectedProps<any>,\n  searchState: any,\n  context: any\n) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id\n  );\n\n  return currentRefinement;\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaRelevantSort',\n  $$type: 'ais.relevantSort',\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return {\n        isVirtualReplica: false,\n        isRelevantSorted: false,\n      };\n    }\n\n    return {\n      isVirtualReplica: results.appliedRelevancyStrictness !== undefined,\n      isRelevantSorted:\n        results.appliedRelevancyStrictness !== undefined &&\n        results.appliedRelevancyStrictness > 0,\n    };\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQueryParameter(\n      'relevancyStrictness',\n      getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      })\n    );\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const nextValue = {\n      [getId()]: nextRefinement,\n    };\n    const resetPage = true;\n\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n});\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const id = getId(props);\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    null\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return null;\n}\n\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n  $$type: 'ais.sortBy',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n        value: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    transformItems: PropTypes.func,\n  },\n\n  getProvidedProps(props, searchState) {\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = props.items.map((item) =>\n      item.value === currentRefinement\n        ? { ...item, isRefined: true }\n        : { ...item, isRefined: false }\n    );\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    const id = getId();\n    const nextValue = { [id]: nextRefinement };\n    const resetPage = true;\n    return refineValue(\n      searchState,\n      nextValue,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      resetPage\n    );\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUpValue(\n      searchState,\n      { ais: props.contextValue, multiIndexContext: props.indexContextValue },\n      getId()\n    );\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n\n  getMetadata() {\n    return { id: getId() };\n  },\n});\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\n/**\n * The `connectStateResults` connector provides a way to access the `searchState` and the `searchResults`\n * of InstantSearch.\n * For instance this connector allows you to create results/noResults or query/noQuery pages.\n * @name connectStateResults\n * @kind connector\n * @providedPropType {object} searchState - The search state of the instant search component. <br/><br/> See: [Search state structure](https://community.algolia.com/react-instantsearch/guide/Search_state.html)\n * @providedPropType {object} searchResults - The search results. <br/><br/> In case of multiple indices: if used under `<Index>`, results will be those of the corresponding index otherwise it'll be those of the root index  See: [Search results structure](https://community.algolia.com/algoliasearch-helper-js/reference.html#searchresults)\n * @providedPropType {object} allSearchResults - In case of multiple indices you can retrieve all the results\n * @providedPropType {string} error - If the search failed, the error will be logged here.\n * @providedPropType {boolean} searching - If there is a search in progress.\n * @providedPropType {boolean} isSearchStalled - Flag that indicates if React InstantSearch has detected that searches are stalled.\n * @providedPropType {boolean} searchingForFacetValues - If there is a search in a list in progress.\n * @providedPropType {object} props - component props.\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, SearchBox, Hits, connectStateResults } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n *\n * const Content = connectStateResults(({ searchState, searchResults }) => {\n *   const hasResults = searchResults && searchResults.nbHits !== 0;\n *\n *    return (\n *      <div>\n *        <div hidden={!hasResults}>\n *          <Hits />\n *        </div>\n *        <div hidden={hasResults}>\n *          <div>No results has been found for {searchState.query}</div>\n *        </div>\n *      </div>\n *    );\n * });\n *\n * const App = () => (\n *   <InstantSearch\n *      searchClient={searchClient}\n *      indexName=\"instant_search\"\n *    >\n *      <SearchBox />\n *      <Content />\n *    </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaStateResults',\n  $$type: 'ais.stateResults',\n\n  getProvidedProps(props, searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    return {\n      searchState,\n      searchResults: results,\n      allSearchResults: searchResults.results,\n      searching: searchResults.searching,\n      isSearchStalled: searchResults.isSearchStalled,\n      error: searchResults.error,\n      searchingForFacetValues: searchResults.searchingForFacetValues,\n      props,\n    };\n  },\n});\n","import createConnector from '../core/createConnector';\n// @ts-ignore\nimport { getResults } from '../core/indexUtils';\n\n/**\n * connectStats connector provides the logic to build a widget that will\n *  displays algolia search statistics (hits number and processing time).\n * @name connectStats\n * @kind connector\n * @providedPropType {number} nbHits - number of hits returned by Algolia.\n * @providedPropType {number} nbSortedHits - number of sorted hits returned by Algolia.\n * @providedPropType {number} processingTimeMS - the time in ms took by Algolia to search for results.\n */\nexport default createConnector({\n  displayName: 'AlgoliaStats',\n  $$type: 'ais.stats',\n\n  getProvidedProps(props, _searchState, searchResults) {\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (!results) {\n      return null;\n    }\n\n    return {\n      areHitsSorted:\n        results.appliedRelevancyStrictness !== undefined &&\n        results.appliedRelevancyStrictness > 0 &&\n        results.nbHits !== results.nbSortedHits,\n      nbHits: results.nbHits,\n      nbSortedHits: results.nbSortedHits,\n      processingTimeMS: results.processingTimeMS,\n    };\n  },\n});\n","import PropTypes from 'prop-types';\nimport { find } from '../core/utils';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  getIndexId,\n  getResults,\n  refineValue,\n  getCurrentRefinementValue,\n} from '../core/indexUtils';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nconst namespace = 'toggle';\n\nconst falsyStrings = ['0', 'false', 'null', 'undefined'];\n\nfunction getCurrentRefinement(props, searchState, context) {\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    `${namespace}.${getId(props)}`,\n    false\n  );\n\n  if (falsyStrings.indexOf(currentRefinement) !== -1) {\n    return false;\n  }\n\n  return Boolean(currentRefinement);\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId(props);\n  const nextValue = { [id]: nextRefinement ? nextRefinement : false };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, `${namespace}.${getId(props)}`);\n}\n\n/**\n * connectToggleRefinement connector provides the logic to build a widget that will\n * provides an on/off filtering feature based on an attribute value.\n * @name connectToggleRefinement\n * @kind connector\n * @requirements To use this widget, you'll need an attribute to toggle on.\n *\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\n *\n * @propType {string} attribute - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\n * @propType {string} label - Label for the toggle.\n * @propType {string} value - Value of the refinement to apply on `attribute`.\n * @propType {boolean} [defaultRefinement=false] - Default searchState of the widget. Should the toggle be checked by default?\n * @providedPropType {boolean} currentRefinement - `true` when the refinement is applied, `false` otherwise\n * @providedPropType {object} count - an object that contains the count for `checked` and `unchecked` state\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n */\nexport default createConnector({\n  displayName: 'AlgoliaToggle',\n  $$type: 'ais.toggle',\n\n  propTypes: {\n    label: PropTypes.string.isRequired,\n    attribute: PropTypes.string.isRequired,\n    value: PropTypes.any.isRequired,\n    filter: PropTypes.func,\n    defaultRefinement: PropTypes.bool,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    const { attribute, value } = props;\n    const results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    const allFacetValues =\n      results && results.getFacetByName(attribute)\n        ? results.getFacetValues(attribute)\n        : null;\n\n    const facetValue =\n      // Use null to always be consistent with type of the value\n      // count: number | null\n      allFacetValues && allFacetValues.length\n        ? find(allFacetValues, (item) => item.name === value.toString())\n        : null;\n\n    const facetValueCount = facetValue && facetValue.count;\n    const allFacetValuesCount =\n      // Use null to always be consistent with type of the value\n      // count: number | null\n      allFacetValues && allFacetValues.length\n        ? allFacetValues.reduce((acc, item) => acc + item.count, 0)\n        : null;\n\n    const canRefine = currentRefinement\n      ? allFacetValuesCount !== null && allFacetValuesCount > 0\n      : facetValueCount !== null && facetValueCount > 0;\n\n    const count = {\n      checked: allFacetValuesCount,\n      unchecked: facetValueCount,\n    };\n\n    return {\n      currentRefinement,\n      canRefine,\n      count,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const { attribute, value, filter } = props;\n    const checked = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    let nextSearchParameters = searchParameters.addDisjunctiveFacet(attribute);\n\n    if (checked) {\n      nextSearchParameters = nextSearchParameters.addDisjunctiveFacetRefinement(\n        attribute,\n        value\n      );\n\n      if (filter) {\n        nextSearchParameters = filter(nextSearchParameters);\n      }\n    }\n\n    return nextSearchParameters;\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId(props);\n    const checked = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const items = [];\n    const index = getIndexId({\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n\n    if (checked) {\n      items.push({\n        label: props.label,\n        currentRefinement: checked,\n        attribute: props.attribute,\n        value: (nextState) =>\n          refine(props, nextState, false, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue,\n          }),\n      });\n    }\n\n    return { id, index, items };\n  },\n});\n","import createConnector from '../core/createConnector';\n// @ts-ignore\nimport { getResults } from '../core/indexUtils';\n\ntype Results = { index: string };\ntype Hit = { objectID: string; __position: number; __queryID: string };\n\ntype InsightsClient = (\n  method: InsightsClientMethod,\n  payload: InsightsClientPayload\n) => void;\n\ntype InsightsClientMethod =\n  | 'clickedObjectIDsAfterSearch'\n  | 'convertedObjectIDsAfterSearch';\n\ntype InsightsClientPayload = {\n  index: string;\n  queryID: string;\n  eventName: string;\n  objectIDs: string[];\n  positions?: number[];\n};\n\nfunction inferPayload({\n  method,\n  results,\n  currentHit,\n}: {\n  method: InsightsClientMethod;\n  results: Results;\n  currentHit: Hit;\n}): Omit<InsightsClientPayload, 'eventName'> {\n  const { index } = results;\n  const queryID = currentHit.__queryID;\n  const objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(`Could not infer \\`queryID\\`. Ensure \\`clickAnalytics: true\\` was added with the Configure widget.\nSee: https://alg.li/VpPpLt`);\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch': {\n      const positions = [currentHit.__position];\n      return { index, queryID, objectIDs, positions };\n    }\n\n    case 'convertedObjectIDsAfterSearch':\n      return { index, queryID, objectIDs };\n\n    default:\n      throw new Error(\n        `Unsupported method \"${method}\" passed to the insights function. The supported methods are: \"clickedObjectIDsAfterSearch\", \"convertedObjectIDsAfterSearch\".`\n      );\n  }\n}\n\nconst wrapInsightsClient =\n  (aa: InsightsClient, results: Results, currentHit: Hit) =>\n  (method: InsightsClientMethod, payload: Partial<InsightsClientPayload>) => {\n    if (typeof aa !== 'function') {\n      throw new TypeError(`Expected insightsClient to be a Function`);\n    }\n    const inferredPayload = inferPayload({ method, results, currentHit });\n    aa(method, { ...inferredPayload, ...payload } as any);\n  };\n\nexport default (insightsClient: InsightsClient) =>\n  createConnector({\n    displayName: 'AlgoliaInsights',\n    $$type: 'ais.insights',\n\n    getProvidedProps(props, _, searchResults) {\n      const results: Results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      });\n\n      const insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return { insights };\n    },\n  });\n","import PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport {\n  cleanUpValue,\n  refineValue,\n  getCurrentRefinementValue,\n  getIndexId,\n} from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getAdditionalId() {\n  return 'additionalVoiceParameters';\n}\n\nfunction getCurrentRefinementQuery(props, searchState, context) {\n  const id = getId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\n\nfunction getCurrentRefinementAdditional(props, searchState, context) {\n  const id = getAdditionalId();\n  const currentRefinement = getCurrentRefinementValue(\n    props,\n    searchState,\n    context,\n    id,\n    ''\n  );\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return {};\n}\n\nfunction refine(props, searchState, nextRefinement, context) {\n  const id = getId();\n  const voiceParams = getAdditionalId();\n  const queryLanguages = props.language\n    ? { queryLanguages: [props.language.split('-')[0]] }\n    : {};\n  const additionalQueryParameters =\n    typeof props.additionalQueryParameters === 'function'\n      ? {\n          ignorePlurals: true,\n          removeStopWords: true,\n          optionalWords: nextRefinement,\n          ...props.additionalQueryParameters({ query: nextRefinement }),\n        }\n      : {};\n  const nextValue = {\n    [id]: nextRefinement,\n    [voiceParams]: {\n      ...queryLanguages,\n      ...additionalQueryParameters,\n    },\n  };\n  const resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction cleanUp(props, searchState, context) {\n  const interimState = cleanUpValue(searchState, context, getId());\n  return cleanUpValue(interimState, context, getAdditionalId());\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaVoiceSearch',\n  $$type: 'ais.voiceSearch',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n  },\n\n  getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinementQuery(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      isSearchStalled: searchResults.isSearchStalled,\n    };\n  },\n\n  refine(props, searchState, nextRefinement) {\n    return refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  cleanUp(props, searchState) {\n    return cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n  },\n\n  getSearchParameters(searchParameters, props, searchState) {\n    const query = getCurrentRefinementQuery(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    const additionalParams = getCurrentRefinementAdditional(\n      props,\n      searchState,\n      {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }\n    );\n\n    return searchParameters\n      .setQuery(query)\n      .setQueryParameters(additionalParams);\n  },\n\n  getMetadata(props, searchState) {\n    const id = getId();\n    const currentRefinement = getCurrentRefinementQuery(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue,\n    });\n    return {\n      id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue,\n      }),\n      items:\n        currentRefinement === null\n          ? []\n          : [\n              {\n                label: `${id}: ${currentRefinement}`,\n                value: (nextState) =>\n                  refine(props, nextState, '', {\n                    ais: props.contextValue,\n                    multiIndexContext: props.indexContextValue,\n                  }),\n                currentRefinement,\n              },\n            ],\n    };\n  },\n});\n","// Core\nexport { default as createConnector } from './core/createConnector';\nexport {\n  instantSearchContext,\n  InstantSearchConsumer,\n  InstantSearchProvider,\n} from './core/context';\n\n// Utils\n// @ts-ignore not yet typed\nexport { HIGHLIGHT_TAGS } from './core/highlight';\n// @ts-ignore not yet typed\nexport { default as version } from './core/version';\n// @ts-ignore not yet typed\nexport { default as translatable } from './core/translatable';\n\n// Widgets\n// @ts-ignore not yet typed\nexport { default as Configure } from './widgets/Configure';\nexport { default as ExperimentalConfigureRelatedItems } from './widgets/ConfigureRelatedItems';\n\nimport { default as DynamicWidgets } from './widgets/DynamicWidgets';\n/** @deprecated use DynamicWidgets */\nconst ExperimentalDynamicWidgets = DynamicWidgets;\nexport { ExperimentalDynamicWidgets, DynamicWidgets };\n\nexport { default as QueryRuleContext } from './widgets/QueryRuleContext';\nexport { default as Index } from './widgets/Index';\nexport { default as InstantSearch } from './widgets/InstantSearch';\n\n// Connectors\n// @ts-ignore not yet typed\nexport { default as connectAutoComplete } from './connectors/connectAutoComplete';\n// @ts-ignore not yet typed\nexport { default as connectBreadcrumb } from './connectors/connectBreadcrumb';\n// @ts-ignore not yet typed\nexport { default as connectConfigure } from './connectors/connectConfigure';\nexport { default as EXPERIMENTAL_connectConfigureRelatedItems } from './connectors/connectConfigureRelatedItems';\n// @ts-ignore not yet typed\nexport { default as connectCurrentRefinements } from './connectors/connectCurrentRefinements';\n\nimport { default as connectDynamicWidgets } from './connectors/connectDynamicWidgets';\n/** @deprecated use connectDynamicWidgets */\nconst EXPERIMENTAL_connectDynamicWidgets = connectDynamicWidgets;\nexport { connectDynamicWidgets, EXPERIMENTAL_connectDynamicWidgets };\n\n// @ts-ignore not yet typed\nexport { default as connectGeoSearch } from './connectors/connectGeoSearch';\n// @ts-ignore not yet typed\nexport { default as connectHierarchicalMenu } from './connectors/connectHierarchicalMenu';\n// @ts-ignore not yet typed\nexport { default as connectHighlight } from './connectors/connectHighlight';\n// @ts-ignore not yet typed\nexport { default as connectHits } from './connectors/connectHits';\n// @ts-ignore not yet typed\nexport { default as connectHitsPerPage } from './connectors/connectHitsPerPage';\n// @ts-ignore not yet typed\nexport { default as connectInfiniteHits } from './connectors/connectInfiniteHits';\n// @ts-ignore not yet typed\nexport { default as connectMenu } from './connectors/connectMenu';\n// @ts-ignore not yet typed\nexport { default as connectNumericMenu } from './connectors/connectNumericMenu';\n// @ts-ignore not yet typed\nexport { default as connectPagination } from './connectors/connectPagination';\n// @ts-ignore not yet typed\nexport { default as connectPoweredBy } from './connectors/connectPoweredBy';\n// @ts-ignore not yet typed\nexport { default as connectQueryRules } from './connectors/connectQueryRules';\n// @ts-ignore not yet typed\nexport { default as connectRange } from './connectors/connectRange';\n// @ts-ignore not yet typed\nexport { default as connectRefinementList } from './connectors/connectRefinementList';\n// @ts-ignore not yet typed\nexport { default as connectScrollTo } from './connectors/connectScrollTo';\n// @ts-ignore not yet typed\nexport { default as connectSearchBox } from './connectors/connectSearchBox';\n// @ts-ignore not yet typed\nexport { default as connectRelevantSort } from './connectors/connectRelevantSort';\n// @ts-ignore not yet typed\nexport { default as connectSortBy } from './connectors/connectSortBy';\n// @ts-ignore not yet typed\nexport { default as connectStateResults } from './connectors/connectStateResults';\n// @ts-ignore not yet typed\nexport { default as connectStats } from './connectors/connectStats';\n// @ts-ignore not yet typed\nexport { default as connectToggleRefinement } from './connectors/connectToggleRefinement';\n// @ts-ignore not yet typed\nexport { default as connectHitInsights } from './connectors/connectHitInsights';\n// @ts-ignore not yet typed\nexport { default as connectVoiceSearch } from './connectors/connectVoiceSearch';\n\n// Types\nexport * from './types';\n","import React, { Component } from 'react';\n\nconst withKeysPropType = (keys) => (props, propName, componentName) => {\n  const prop = props[propName];\n  if (prop) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(prop)) {\n      if (keys.indexOf(key) === -1) {\n        return new Error(\n          `Unknown \\`${propName}\\` key \\`${key}\\`. Check the render method ` +\n            `of \\`${componentName}\\`.`\n        );\n      }\n    }\n  }\n  return undefined;\n};\n\nexport default function translatable(defaultTranslations) {\n  return (Composed) => {\n    class Translatable extends Component {\n      translate = (key, ...params) => {\n        const { translations } = this.props;\n\n        const translation =\n          translations && translations.hasOwnProperty(key)\n            ? translations[key]\n            : defaultTranslations[key];\n\n        if (typeof translation === 'function') {\n          return translation(...params);\n        }\n\n        return translation;\n      };\n\n      render() {\n        return <Composed translate={this.translate} {...this.props} />;\n      }\n    }\n\n    const name = Composed.displayName || Composed.name || 'UnknownComponent';\n\n    Translatable.displayName = `Translatable(${name})`;\n\n    Translatable.propTypes = {\n      translations: withKeysPropType(Object.keys(defaultTranslations)),\n    };\n\n    return Translatable;\n  };\n}\n"],"names":["hasElementType","Element","hasMap","Map","hasSet","Set","hasArrayBuffer","ArrayBuffer","defer","f","resolved","then","a","b","equal","constructor","length","i","keys","it","Array","isArray","size","entries","next","done","has","value","get","isView","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","$$typeof","error","message","match","console","warn","shallowEqual","objA","objB","keysA","keysB","hasOwn","getDisplayName","Component","displayName","name","Promise","resolve","removeEmptyKey","obj","forEach","key","_typeof","objectHasKeys","addAbsolutePositions","hits","hitsPerPage","page","map","hit","index","__position","addQueryID","queryID","__queryID","find","array","comparator","object","omit","excluded","target","sourceKeys","indexOf","getPropertyByPath","path","replace","split","reduce","current","undefined","unescapeFacetValue","instantSearchContext","createContext","onInternalStateUpdate","createHrefForState","onSearchForFacetValues","onSearchStateChange","onSearchParameters","store","widgetsManager","mainTargetedIndex","InstantSearchConsumer","Consumer","InstantSearchProvider","Provider","IndexConsumer","IndexProvider","createConnectorWithContext","connectorDesc","Composed","additionalWidgetProperties","Connector","isWidget","getSearchParameters","getMetadata","transitionState","_inherits","props","_classCallCheck","_defineProperty","_this","providedProps","getProvidedProps","args","contextValue","refine","getState","widgets","searchForFacetValues","bind","ais","multiIndexContext","indexContextValue","_createClass","this","cleanupTimerRef","clearTimeout","unsubscribe","subscribe","_this2","isUnmounting","setState","unregisterWidget","registerWidget","nextProps","nextState","shouldComponentUpdate","state","propsEqual","prevProps","isEqual","update","setTimeout","_this3","cleanUp","results","resultsFacetValues","searching","searchingForFacetValues","isSearchStalled","metadata","searchParameters","nextWidgetsState","prevWidgetsState","refineProps","searchForFacetValuesProps","createURL","searchForItems","React","$$type","$$widgetType","defaultProps","Error","HIGHLIGHT_TAGS","highlightPreTag","highlightPostTag","parseHighlightedAttribute","isHighlighted","preTag","postTag","_ref$highlightedValue","highlightedValue","splitByPreTag","firstValue","shift","elements","push","splitByPostTag","getIndexId","context","hasMultipleIndices","targetedIndex","getResults","searchResults","indexId","refineValue","searchState","nextRefinement","resetPage","namespace","indices","getNamespaceAndAttributeName","id","parts","attributeName","getCurrentRefinementValue","defaultValue","multiIndex","defaultRefinement","cleanUpValue","attribute","Boolean","indexSearchState","getId","createConnector","children","items","setQueryParameters","prevSearchState","nextSearchState","propKeys","nonPresentKeys","_props","filter","prop","subState","configureState","acc","item","connectConfigure","isObjectOrArrayOrFunction","_merge","sourceVal","targetVal","slice","arguments","reduceRight","l","arr1","arr2","valToNumber","v","parseFloat","lib","addRefinement","refinementList","mod","isRefined","valueAsString","facetRefinement","concat","defaultsPure","removeRefinement","clearRefinement","toggleRefinement","refinementType","hasChanged","newRefinementList","memo","values","facetList","refinementValue","containsRefinements","isEqualNumericRefinement","every","el","SearchParameters","newParameters","params","_parseNumbers","self","userToken","test","facets","disjunctiveFacets","hierarchicalFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacetsRefinements","paramName","isKeyKnown","PARAMETERS","isValueDefined","partialState","numbers","k","parsedValue","isNaN","insideBoundingBox","geoRect","operators","operator","parsedValues","vPrime","merge","make","instance","facet","currentRefinement","rootPath","getHierarchicalRefinement","clearRefinements","toggleHierarchicalFacetRefinement","validate","currentState","parameters","tagFilters","numericFilters","patch","_clearNumericRefinements","RefinementList","clearTags","setIndex","setQuery","newQuery","query","setPage","newPage","setFacets","setDisjunctiveFacets","setHitsPerPage","n","setTypoTolerance","typoTolerance","addNumericRefinement","isNumericRefined","getConjunctiveRefinements","facetName","isConjunctiveFacet","getDisjunctiveRefinements","isDisjunctiveFacet","getExcludeRefinements","removeNumericRefinement","paramValue","op","val","getNumericRefinements","getNumericRefinement","newNumericRefinements","operatorList","outValues","addFacet","addDisjunctiveFacet","addHierarchicalFacet","hierarchicalFacet","isHierarchicalFacet","addFacetRefinement","addExcludeRefinement","addDisjunctiveFacetRefinement","addTagRefinement","tag","isTagRefined","modification","removeFacet","removeDisjunctiveFacet","removeHierarchicalFacet","removeFacetRefinement","removeExcludeRefinement","removeDisjunctiveFacetRefinement","removeTagRefinement","t","toggleFacetRefinement","toggleConjunctiveFacetRefinement","toggleDisjunctiveFacetRefinement","toggleExcludeFacetRefinement","separator","_getHierarchicalFacetSeparator","getHierarchicalFacetByName","lastIndexOf","addHierarchicalFacetRefinement","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","toggleTagRefinement","isFacetRefined","isExcludeRefined","isDisjunctiveFacetRefined","refinements","isOperatorDefined","searchedValue","isAttributeValueDefined","currentValue","getRefinedDisjunctiveFacets","disjunctiveNumericRefinedFacets","intersection","getRefinedHierarchicalFacets","getUnrefinedDisjunctiveFacets","refinedFacets","managedParameters","getQueryParams","queryParams","setQueryParameter","parameter","nextWithNumbers","previousPlainObject","nextPlainObject","previous","isPreviousValueDefined","isNextValueDefined","_getHierarchicalFacetSortBy","sortBy","_getHierarchicalRootPath","_getHierarchicalShowParentLevel","showParentLevel","hierarchicalFacetName","getHierarchicalFacetBreadcrumb","refinement","part","trim","JSON","stringify","defaults","defaultInstructions","sort","out","sortInstruction","matchingDefault","defaultInstruction","collection","iteratees","orders","result","criteria","iteratee","other","res","valIsDefined","valIsNull","othIsDefined","othIsNull","String","hierarchicalFacetResult","hierarchicalFacetIndex","generateTreeFn","hierarchicalTree","currentHierarchicalLevel","picked","parent","level","data","subtree","facetValue","tuple","parentPath","hierarchicalSeparator","hierarchicalRootPath","hierarchicalShowParentLevel","orderBy","exhaustive","facetCount","escapedValue","escapeFacetValue","count","hierarchicalFacetRefinement","prepareHierarchicalFacetSortBy","rootExhaustive","facetResult","fv","getIndices","attributes","idx","assignFacetStats","dest","facetStats","stats","SearchResults","options","mainSubResponse","_rawResults","processingTimeMS","sum","facetsIndices","disjunctiveFacetsIndices","nextDisjunctiveResult","mainFacets","facetKey","hierarchicalAttributeName","isFacetDisjunctive","isFacetConjunctive","position","facetValueObject","facetIndex","idxAttributeName","findIndex","exhaustiveFacetsCount","facets_stats","compact","disjunctiveFacet","dfacet","dataFromMainRequest","facetResults","attributeIndex","refinedFacet","defaultData","root","excludes","generateHierarchicalTree","_state","extractNormalizedFacetValues","predicate","hierarchicalFacetValues","currentRefinementSplit","isExcluded","unshift","setIsRefined","depth","child","getFacetStatsIfAvailable","getRefinement","type","resultsFacets","getFacetByName","DEFAULT_SORT","getFacetValues","opts","facetValues","facetOrdering","recSort","sortFn","node","names","sortedChildren","childNode","renderingContent","orderedFacets","remainingFacets","reverseOrder","order","sortRemainingBy","ordering","formatSort","getFacetStats","getRefinements","facetDeclaration","rootFacet","intermediateFacet","newFacet","numericValue","EventEmitter","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","TypeError","emit","handler","len","listeners","err","er","apply","on","addListener","listener","newListener","warned","m","trace","once","fired","g","removeListener","list","splice","removeAllListeners","ret","listenerCount","evlistener","emitter","ctor","superCtor","create","enumerable","writable","configurable","DerivedHelper","mainHelper","fn","main","lastResults","detach","detachDerivedHelper","getModifiedState","sortObject","localeCompare","curr","requestBuilder","_getQueries","queries","indexName","_getHitsSearchParams","_getDisjunctiveFacetSearchParams","filtersMap","segment","join","hasHierarchicalFacetFilter","some","filteredFacetFilters","facetFilters","facetFilter","filtered","filterValue","_getHitsHierarchicalFacetsAttributes","_getFacetFilters","_getNumericFilters","_getTagFilters","additionalParams","hierarchicalRootLevel","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","vs","orFilters","attributesIndex","attributeToRefine","allAttributes","newAttributes","hierarchicalRefinement","rootLevel","parentLevel","getSearchForFacetQuery","maxFacetHits","stateForSearchForFacetValues","searchForFacetSearchParameters","facetQuery","require$$0","AlgoliaSearchHelper","client","addAlgoliaAgent","setClient","_queryId","_lastQueryIdReceived","derivedHelpers","_currentNbQueries","setCurrentPage","_change","isPageReset","getCurrentPage","search","_search","onlyWithDerivedHelpers","searchOnlyWithDerivedHelpers","getQuery","searchOnce","cb","tempState","content","_originalResponse","e","catch","findAnswers","derivedHelper","derivedState","attributesForPrediction","nbHits","errorMessage","initIndex","queryLanguages","userState","isDisjunctive","clientHasSFFV","clientHasInitIndex","algoliaQuery","searchForFacetValuesPromise","response","facetHits","q","addDisjunctiveRefine","addRefine","addFacetExclusion","addExclude","addTag","removeDisjunctiveRefine","removeRefine","removeFacetExclusion","removeExclude","removeTag","toggleFacetExclusion","toggleExclude","toggleRefine","toggleTag","nextPage","previousPage","newState","overrideStateWithoutTriggeringChangeEvent","hasRefinements","isDisjunctiveRefined","hasTag","hasTagRefinements","getIndex","getPage","getTags","r","states","mainQueries","derivedQueries","queriesCount","helper","derivedStateQueries","queryId","_dispatchAlgoliaResponse","_dispatchAlgoliaError","s","specificResults","formattedResponse","containsRefinement","_hasDisjunctiveRefinements","disjunctiveRefinements","event","clearCache","newClient","getClient","derive","pos","hasPendingRequests","algoliasearchHelper","version","createOptionalFilter","attributeValue","attributeScore","getSearchParametersFromProps","optionalFilters","matchingPatterns","attributePattern","score","attributeSubValue","transformSearchParameters","sumOrFiltersScores","objectID","x","_prevSearchState","searchParametersKeys","_searchParameters","performance","global","window","now","mozNow","msNow","oNow","webkitNow","Symbol","for","c","d","h","p","w","y","z","u","A","module","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","getShim","ReactPropTypes","isRequired","bigint","bool","func","number","string","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","ConfigureRelatedItems","propTypes","connectConfigureRelatedItems","transformItems","maxValuesPerFacet","_searchState","attributesToRender","facetOrder","Math","max","getAttribute","Children","only","connectDynamicWidgets","Fallback","fallbackComponent","set","Fragment","widgetKey","getWidgetRefinements","widgetState","rangeKey","transformRuleContexts","ruleContexts","trackedFilters","_1","canRefine","userData","transformedItems","nextRuleContexts","newRuleContexts","facetRefinements","trackedFacetValues","getTrackedFacetValues","includes","initialRuleContexts","connectQueryRules","getIndexContext","Index","indexContext","addAlgoliaAgents","searchClient","ReactVersion","isMultiIndexContext","widget","isTargetedIndexEqualIndex","isIndexWidget","isIndexWidgetEqualIndex","sortIndexWidgetsFirst","firstWidget","secondWidget","isFirstWidgetIndex","isSecondWidgetIndex","serializeQueryParameters","format","encodeURIComponent","createInstantSearchManager","searchCounter","onWidgetsUpdate","scheduled","baseMethod","_ref$initialState","initialState","resultsState","stalledSearchDelay","skip","stalledSearchTimer","handleSearchSuccess","handleSearchError","initialSearchParameters","scheduleUpdate","getWidgets","transporter","_cacheHydrated","_useCache","requests","methodArgs","requestsWithSerializedParams","request","responsesCache","method","rawResults","cache","datum","nestedItem","_internalIndexId","sharedParameters","mainParameters","targetedIndexEqualMainIndex","subIndexEqualMainIndex","derivedIndices","targetedIndexNotEqualMainIndex","subIndexNotEqualMainIndex","derivedParameters","isDerivedHelpersEmpty","nextIsSearchStalled","getWidgetsIds","meta","_ref5$maxFacetHits","maxFacetHitsWithinRange","min","onExternalStateUpdate","updateClient","updateIndex","newIndex","skipSearch","injectMetadata","internalProps","payloadContainer","document","createElement","refNode","querySelector","payload","widgetsPayload","_connectorDesc","_ref2$defaultProps","_ref2$displayName","ua","userAgent","_ua","appendChild","isControlled","InstantSearch","instantSearchManager","onWidgetsInternalStateUpdate","prevIsControlled","refresh","navigator","getKnownKeys","widgetsCollector","prevState","nextIsControlled","previousSearchState","getCurrentRefinement","getBoundingBoxId","currentRefinementToString","northEast","lat","lng","southWest","stringToPosition","pattern","latLngRegExp","nextValue","transformValue","label","clearsQuery","clear","currentRefinementFromSearchState","currentRefinementFromSearchParameters","currentPositionFromSearchState","propsWithoutDefaultRefinement","aroundLatLng","configureAroundLatLng","currentPositionFromSearchParameters","_","_geoloc","isRefinedWithMap","truncate","limit","highlight","highlightProperty","_ref$postTag","highlightObject","showMore","showMoreLimit","itemsLimit","rootAttribute","parseInt","getStateWithoutPage","nbPages","cachedHits","cachedState","hitsWithPositionsAndQueryID","firstReceivedPage","lastReceivedPage","hasPrevious","_cache","read","write","Number","hasMore","refinePrevious","refineNext","getValue","getLimit","defaultSortBy","searchable","searchForFacetValuesResults","isFromSearch","_highlightResult","highlighted","stringifyItem","start","end","noRefinement","range","NEGATIVE_INFINITY","POSITIVE_INFINITY","refinedItem","startStr","_value$split2","endStr","hostname","url","currentRange","isFloatPrecision","precision","nextMin","nextMax","hasMinBound","hasMaxBound","hasMinRefinment","hasMaxRefinment","getCurrentRefinementWithRange","nextValueForRefinement","hasBound","isReset","currentMinRange","currentMaxRange","isMinReset","isMaxReset","nextMinAsNumber","nextMaxAsNumber","isNextMinValid","isFinite","isNextMaxValid","header","footer","minBound","maxBound","hasFacet","boundaries","pow","floor","ceil","rangeMin","rangeMax","_currentRange","minRange","maxRange","minValue","maxValue","hasMin","hasMax","fragments","selectedValue","addKey","addRefinementKey","nextSelectedItems","scrollOn","cleanedSearchState","hasNotChanged","isVirtualReplica","appliedRelevancyStrictness","isRelevantSorted","selectedIndex","allSearchResults","areHitsSorted","nbSortedHits","falsyStrings","allFacetValues","facetValueCount","allFacetValuesCount","checked","unchecked","nextSearchParameters","wrapInsightsClient","aa","currentHit","inferredPayload","objectIDs","positions","getAdditionalId","getCurrentRefinementQuery","language","additionalQueryParameters","ignorePlurals","removeStopWords","optionalWords","interimState","ExperimentalDynamicWidgets","DynamicWidgets","EXPERIMENTAL_connectDynamicWidgets","inferredIndexId","insightsClient","insights","defaultTranslations","Translatable","translations","translation","translate"],"mappings":"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"}