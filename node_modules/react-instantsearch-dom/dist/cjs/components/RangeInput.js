"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RawRangeInput = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactInstantsearchCore = require("react-instantsearch-core");
var _utils = require("../core/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var cx = (0, _utils.createClassNames)('RangeInput');
var RawRangeInput = /*#__PURE__*/function (_Component) {
  _inherits(RawRangeInput, _Component);
  var _super = _createSuper(RawRangeInput);
  function RawRangeInput(props) {
    var _this;
    _classCallCheck(this, RawRangeInput);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "onSubmit", function (e) {
      e.preventDefault();
      _this.props.refine({
        min: _this.state.from,
        max: _this.state.to
      });
    });
    _this.state = _this.normalizeStateForRendering(props);
    return _this;
  }
  _createClass(RawRangeInput, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.canRefine && (prevProps.currentRefinement.min !== this.props.currentRefinement.min || prevProps.currentRefinement.max !== this.props.currentRefinement.max)) {
        this.setState(this.normalizeStateForRendering(this.props));
      }
    }
  }, {
    key: "normalizeStateForRendering",
    value: function normalizeStateForRendering(props) {
      var canRefine = props.canRefine,
        rangeMin = props.min,
        rangeMax = props.max;
      var _props$currentRefinem = props.currentRefinement,
        valueMin = _props$currentRefinem.min,
        valueMax = _props$currentRefinem.max;
      return {
        from: canRefine && valueMin !== undefined && valueMin !== rangeMin ? valueMin : '',
        to: canRefine && valueMax !== undefined && valueMax !== rangeMax ? valueMax : ''
      };
    }
  }, {
    key: "normalizeRangeForRendering",
    value: function normalizeRangeForRendering(_ref) {
      var canRefine = _ref.canRefine,
        min = _ref.min,
        max = _ref.max;
      var hasMin = min !== undefined;
      var hasMax = max !== undefined;
      return {
        min: canRefine && hasMin && hasMax ? min : '',
        max: canRefine && hasMin && hasMax ? max : ''
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$state = this.state,
        from = _this$state.from,
        to = _this$state.to;
      var _this$props = this.props,
        precision = _this$props.precision,
        translate = _this$props.translate,
        canRefine = _this$props.canRefine,
        className = _this$props.className;
      var _this$normalizeRangeF = this.normalizeRangeForRendering(this.props),
        min = _this$normalizeRangeF.min,
        max = _this$normalizeRangeF.max;
      var step = 1 / Math.pow(10, precision);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(cx('', !canRefine && '-noRefinement'), className)
      }, /*#__PURE__*/_react.default.createElement("form", {
        className: cx('form'),
        onSubmit: this.onSubmit
      }, /*#__PURE__*/_react.default.createElement("input", {
        className: cx('input', 'input--min'),
        type: "number",
        min: min,
        max: max,
        value: from,
        step: step,
        placeholder: min,
        disabled: !canRefine,
        onChange: function onChange(e) {
          return _this2.setState({
            from: e.currentTarget.value
          });
        }
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: cx('separator')
      }, translate('separator')), /*#__PURE__*/_react.default.createElement("input", {
        className: cx('input', 'input--max'),
        type: "number",
        min: min,
        max: max,
        value: to,
        step: step,
        placeholder: max,
        disabled: !canRefine,
        onChange: function onChange(e) {
          return _this2.setState({
            to: e.currentTarget.value
          });
        }
      }), /*#__PURE__*/_react.default.createElement("button", {
        className: cx('submit'),
        type: "submit"
      }, translate('submit'))));
    }
  }]);
  return RawRangeInput;
}(_react.Component);
exports.RawRangeInput = RawRangeInput;
_defineProperty(RawRangeInput, "propTypes", {
  canRefine: _propTypes.default.bool.isRequired,
  precision: _propTypes.default.number.isRequired,
  translate: _propTypes.default.func.isRequired,
  refine: _propTypes.default.func.isRequired,
  min: _propTypes.default.number,
  max: _propTypes.default.number,
  currentRefinement: _propTypes.default.shape({
    min: _propTypes.default.number,
    max: _propTypes.default.number
  }),
  className: _propTypes.default.string
});
_defineProperty(RawRangeInput, "defaultProps", {
  currentRefinement: {},
  className: ''
});
var _default = (0, _reactInstantsearchCore.translatable)({
  submit: 'ok',
  separator: 'to'
})(RawRangeInput);
exports.default = _default;