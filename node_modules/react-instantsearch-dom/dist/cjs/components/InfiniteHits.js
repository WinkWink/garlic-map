"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactInstantsearchCore = require("react-instantsearch-core");
var _utils = require("../core/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var cx = (0, _utils.createClassNames)('InfiniteHits');
var InfiniteHits = /*#__PURE__*/function (_Component) {
  _inherits(InfiniteHits, _Component);
  var _super = _createSuper(InfiniteHits);
  function InfiniteHits() {
    _classCallCheck(this, InfiniteHits);
    return _super.apply(this, arguments);
  }
  _createClass(InfiniteHits, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        HitComponent = _this$props.hitComponent,
        hits = _this$props.hits,
        showPrevious = _this$props.showPrevious,
        hasPrevious = _this$props.hasPrevious,
        hasMore = _this$props.hasMore,
        refinePrevious = _this$props.refinePrevious,
        refineNext = _this$props.refineNext,
        translate = _this$props.translate,
        className = _this$props.className;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(cx(''), className)
      }, showPrevious && /*#__PURE__*/_react.default.createElement("button", {
        className: cx('loadPrevious', !hasPrevious && 'loadPrevious--disabled'),
        onClick: function onClick() {
          return refinePrevious();
        },
        disabled: !hasPrevious
      }, translate('loadPrevious')), /*#__PURE__*/_react.default.createElement("ul", {
        className: cx('list')
      }, hits.map(function (hit) {
        return /*#__PURE__*/_react.default.createElement("li", {
          key: hit.objectID,
          className: cx('item')
        }, /*#__PURE__*/_react.default.createElement(HitComponent, {
          hit: hit
        }));
      })), /*#__PURE__*/_react.default.createElement("button", {
        className: cx('loadMore', !hasMore && 'loadMore--disabled'),
        onClick: function onClick() {
          return refineNext();
        },
        disabled: !hasMore
      }, translate('loadMore')));
    }
  }]);
  return InfiniteHits;
}(_react.Component);
InfiniteHits.propTypes = {
  hits: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  showPrevious: _propTypes.default.bool.isRequired,
  hasPrevious: _propTypes.default.bool.isRequired,
  hasMore: _propTypes.default.bool.isRequired,
  refinePrevious: _propTypes.default.func.isRequired,
  refineNext: _propTypes.default.func.isRequired,
  translate: _propTypes.default.func.isRequired,
  className: _propTypes.default.string,
  // this is actually PropTypes.elementType, but our prop-types version is outdated
  hitComponent: _propTypes.default.any
};
InfiniteHits.defaultProps = {
  className: '',
  showPrevious: false,
  hitComponent: function hitComponent(hit) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        borderBottom: '1px solid #bbb',
        paddingBottom: '5px',
        marginBottom: '5px',
        wordBreak: 'break-all'
      }
    }, JSON.stringify(hit).slice(0, 100), "...");
  }
};
var _default = (0, _reactInstantsearchCore.translatable)({
  loadPrevious: 'Load previous',
  loadMore: 'Load more'
})(InfiniteHits);
exports.default = _default;