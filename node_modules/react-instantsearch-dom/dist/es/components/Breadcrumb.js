function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { translatable } from 'react-instantsearch-core';
import { createClassNames } from "../core/utils.js";
import Link from "./Link.js";
var cx = createClassNames('Breadcrumb');
var itemsPropType = PropTypes.arrayOf(PropTypes.shape({
  label: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired
}));
var Breadcrumb = /*#__PURE__*/function (_Component) {
  _inherits(Breadcrumb, _Component);
  var _super = _createSuper(Breadcrumb);
  function Breadcrumb() {
    _classCallCheck(this, Breadcrumb);
    return _super.apply(this, arguments);
  }
  _createClass(Breadcrumb, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        canRefine = _this$props.canRefine,
        createURL = _this$props.createURL,
        items = _this$props.items,
        refine = _this$props.refine,
        rootURL = _this$props.rootURL,
        separator = _this$props.separator,
        translate = _this$props.translate,
        className = _this$props.className;
      var rootPath = canRefine ? /*#__PURE__*/React.createElement("li", {
        className: cx('item')
      }, /*#__PURE__*/React.createElement(Link, {
        className: cx('link'),
        onClick: function onClick() {
          return !rootURL ? refine() : null;
        },
        href: rootURL ? rootURL : createURL()
      }, translate('rootLabel'))) : null;
      var breadcrumb = items.map(function (item, idx) {
        var isLast = idx === items.length - 1;
        return /*#__PURE__*/React.createElement("li", {
          className: cx('item', isLast && 'item--selected'),
          key: idx
        }, /*#__PURE__*/React.createElement("span", {
          className: cx('separator')
        }, separator), !isLast ? /*#__PURE__*/React.createElement(Link, {
          className: cx('link'),
          onClick: function onClick() {
            return refine(item.value);
          },
          href: createURL(item.value)
        }, item.label) : item.label);
      });
      return /*#__PURE__*/React.createElement("div", {
        className: classNames(cx('', !canRefine && '-noRefinement'), className)
      }, /*#__PURE__*/React.createElement("ul", {
        className: cx('list')
      }, rootPath, breadcrumb));
    }
  }]);
  return Breadcrumb;
}(Component);
_defineProperty(Breadcrumb, "propTypes", {
  canRefine: PropTypes.bool.isRequired,
  createURL: PropTypes.func.isRequired,
  items: itemsPropType,
  refine: PropTypes.func.isRequired,
  rootURL: PropTypes.string,
  separator: PropTypes.node,
  translate: PropTypes.func.isRequired,
  className: PropTypes.string
});
_defineProperty(Breadcrumb, "defaultProps", {
  rootURL: null,
  separator: ' > ',
  className: ''
});
export default translatable({
  rootLabel: 'Home'
})(Breadcrumb);