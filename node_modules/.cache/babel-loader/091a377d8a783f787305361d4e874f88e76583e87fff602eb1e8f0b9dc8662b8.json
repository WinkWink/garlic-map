{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndexId } from \"../core/indexUtils.js\";\nfunction getId() {\n  return 'query';\n}\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n  var nextValue = _defineProperty({}, id, nextRefinement);\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  $$type: 'ais.searchBox',\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      id: id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(id, \": \").concat(currentRefinement),\n        value: function value(nextState) {\n          return _refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          });\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","TypeError","Number","PropTypes","createConnector","cleanUpValue","refineValue","getCurrentRefinementValue","getIndexId","getId","getCurrentRefinement","props","searchState","context","id","currentRefinement","_refine","nextRefinement","nextValue","resetPage","_cleanUp","displayName","$$type","propTypes","defaultRefinement","string","getProvidedProps","searchResults","ais","contextValue","multiIndexContext","indexContextValue","isSearchStalled","refine","cleanUp","getSearchParameters","searchParameters","setQuery","getMetadata","index","items","label","concat","nextState"],"sources":["/Users/amandawinkler/Downloads/algolia-instantsearch-react-geo/node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndexId } from \"../core/indexUtils.js\";\nfunction getId() {\n  return 'query';\n}\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n  return '';\n}\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n  var nextValue = _defineProperty({}, id, nextRefinement);\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  $$type: 'ais.searchBox',\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      id: id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(id, \": \").concat(currentRefinement),\n        value: function value(nextState) {\n          return _refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          });\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}