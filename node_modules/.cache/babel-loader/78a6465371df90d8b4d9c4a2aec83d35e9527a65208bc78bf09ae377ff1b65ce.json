{"ast":null,"code":"'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar intersection = require('../functions/intersection');\nvar find = require('../functions/find');\nvar valToNumber = require('../functions/valToNumber');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar isValidUserToken = require('../utils/isValidUserToken');\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every(function (el, i) {\n      return isEqualNumericRefinement(b[i], el);\n    });\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not reparse numbers in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n  var numbers = {};\n  var numberKeys = ['aroundPrecision', 'aroundRadius', 'getRankingInfo', 'minWordSizefor2Typos', 'minWordSizefor1Typo', 'page', 'maxValuesPerFacet', 'distinct', 'minimumAroundRadius', 'hitsPerPage', 'minProximity'];\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n  return merge({}, partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error('[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' + 'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error('[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' + 'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n  if (currentState.numericFilters && params.numericRefinements && objectHasKeys(params.numericRefinements)) {\n    return new Error(\"[Numeric filters] Can't switch from the advanced to the managed API. It\" + ' is probably an error, if this is really what you want, you have to first' + ' clear the numeric filters.');\n  }\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\"[Numeric filters] Can't switch from the managed API to the advanced. It\" + ' is probably an error, if this is really what you want, you have to first' + ' clear the numeric filters.');\n  }\n  return null;\n};\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters}\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(this.facetsRefinements, attribute, 'conjunctiveFacet'),\n      facetsExcludes: RefinementList.clearRefinement(this.facetsExcludes, attribute, 'exclude'),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(this.disjunctiveFacetsRefinements, attribute, 'disjunctiveFacet'),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(this.hierarchicalFacetsRefinements, attribute, 'hierarchicalFacet')\n    };\n    if (patch.numericRefinements === this.numericRefinements && patch.facetsRefinements === this.facetsRefinements && patch.facetsExcludes === this.facetsExcludes && patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements && patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters}\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters}\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters}\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters}\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters}\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters}\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters}\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters}\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters}\n   * @example\n   * // for price = 50 or 40\n   * searchparameter.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * searchparameter.addNumericRefinement('size', '=', 38);\n   * searchparameter.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function (attribute, operator, v) {\n    var value = valToNumber(v);\n    if (this.isNumericRefined(attribute, operator, value)) return this;\n    var mod = merge({}, this.numericRefinements);\n    mod[attribute] = merge({}, mod[attribute]);\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(value);\n    } else {\n      mod[attribute][operator] = [value];\n    }\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters}\n   */\n  removeNumericRefinement: function (attribute, operator, paramValue) {\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (value, key) {\n          return key === attribute && value.op === operator && isEqualNumericRefinement(value.val, valToNumber(paramValue));\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      })\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>}\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function (memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n        operators = operators || {};\n        Object.keys(operators).forEach(function (operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function (value) {\n            var predicateResult = attribute({\n              val: value,\n              op: operator\n            }, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n          operatorList[operator] = outValues;\n        });\n        memo[key] = operatorList;\n        return memo;\n      }, {});\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters}\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters}\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error('Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters}\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters}\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters}\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters}\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters}\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      })\n    };\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n    throw new Error('Cannot refine the undeclared facet ' + facet + '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n    var mod = {};\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined && this.hierarchicalFacetsRefinements[facet].length > 0 && (\n    // remove current refinement:\n    // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n    this.hierarchicalFacetsRefinements[facet][0] === value ||\n    // remove a parent refinement of the current refinement:\n    //  - refinement was 'beer > IPA > Flying dog'\n    //  - call is toggleRefine('beer > IPA')\n    //  - refinement should be `beer`\n    this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0);\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters}\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean}\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n    var refinements = this.getHierarchicalRefinement(facet);\n    if (!value) {\n      return refinements.length > 0;\n    }\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return !!this.numericRefinements[attribute];\n    }\n    var isOperatorDefined = this.numericRefinements[attribute] && this.numericRefinements[attribute][operator] !== undefined;\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined = findArray(this.numericRefinements[attribute][operator], parsedValue) !== undefined;\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean}\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(Object.keys(this.numericRefinements).filter(function (facet) {\n      return Object.keys(self.numericRefinements[facet]).length > 0;\n    }), this.disjunctiveFacets);\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function (facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    }).concat(disjunctiveNumericRefinedFacets).concat(this.getRefinedHierarchicalFacets());\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    var self = this;\n    return intersection(\n    // enforce the order between the two arrays,\n    // so that refinement name index === hierarchical facet index\n    this.hierarchicalFacets.map(function (facet) {\n      return facet.name;\n    }), Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n      return self.hierarchicalFacetsRefinements[facet].length > 0;\n    }));\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]}\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n  managedParameters: ['index', 'facets', 'disjunctiveFacets', 'facetsRefinements', 'hierarchicalFacets', 'facetsExcludes', 'disjunctiveFacetsRefinements', 'numericRefinements', 'tagRefinements', 'hierarchicalFacetsRefinements'],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n    var queryParams = {};\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n    var modification = {};\n    modification[parameter] = value;\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n    var error = SearchParameters.validate(this, params);\n    if (error) {\n      throw error;\n    }\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (previous, key) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n      return previous;\n    }, previousPlainObject);\n    return new this.constructor(nextPlainObject);\n  },\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n    return this.setPage(0);\n  },\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facetName));\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  }\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;","map":{"version":3,"names":["merge","require","defaultsPure","intersection","find","valToNumber","omit","objectHasKeys","isValidUserToken","RefinementList","isEqualNumericRefinement","a","b","Array","isArray","length","every","el","i","findArray","array","searchedValue","currentValue","SearchParameters","newParameters","params","_parseNumbers","userToken","undefined","console","warn","facets","disjunctiveFacets","hierarchicalFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacetsRefinements","self","Object","keys","forEach","paramName","isKeyKnown","PARAMETERS","indexOf","isValueDefined","partialState","numbers","numberKeys","k","value","parsedValue","parseFloat","isNaN","insideBoundingBox","map","geoRect","attribute","operators","operator","values","parsedValues","v","vPrime","make","makeSearchParameters","instance","facet","rootPath","currentRefinement","getHierarchicalRefinement","name","clearRefinements","toggleHierarchicalFacetRefinement","validate","currentState","parameters","tagFilters","Error","numericFilters","prototype","constructor","patch","_clearNumericRefinements","clearRefinement","setQueryParameters","clearTags","setIndex","index","setQuery","newQuery","query","setPage","newPage","page","setFacets","setDisjunctiveFacets","setHitsPerPage","n","hitsPerPage","setTypoTolerance","typoTolerance","addNumericRefinement","isNumericRefined","mod","slice","push","getConjunctiveRefinements","facetName","isConjunctiveFacet","getDisjunctiveRefinements","isDisjunctiveFacet","getExcludeRefinements","removeNumericRefinement","paramValue","key","op","val","getNumericRefinements","getNumericRefinement","hasChanged","newNumericRefinements","reduce","memo","operatorList","outValues","predicateResult","addFacet","concat","addDisjunctiveFacet","addHierarchicalFacet","hierarchicalFacet","isHierarchicalFacet","addFacetRefinement","isRefined","addRefinement","addExcludeRefinement","addDisjunctiveFacetRefinement","addTagRefinement","tag","isTagRefined","modification","removeFacet","filter","f","removeDisjunctiveFacet","removeHierarchicalFacet","removeFacetRefinement","removeRefinement","removeExcludeRefinement","removeDisjunctiveFacetRefinement","removeTagRefinement","t","toggleRefinement","toggleFacetRefinement","toggleConjunctiveFacetRefinement","toggleDisjunctiveFacetRefinement","toggleExcludeFacetRefinement","separator","_getHierarchicalFacetSeparator","getHierarchicalFacetByName","upOneOrMultipleLevel","lastIndexOf","addHierarchicalFacetRefinement","path","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","toggleTagRefinement","isFacetRefined","isExcludeRefined","isDisjunctiveFacetRefined","refinements","isOperatorDefined","isAttributeValueDefined","getRefinedDisjunctiveFacets","disjunctiveNumericRefinedFacets","getRefinedHierarchicalFacets","getUnrefinedDisjunctiveFacets","refinedFacets","managedParameters","getQueryParams","queryParams","setQueryParameter","setParameter","parameter","error","nextWithNumbers","previousPlainObject","acc","nextPlainObject","previous","isPreviousValueDefined","isNextValueDefined","resetPage","_getHierarchicalFacetSortBy","sortBy","_getHierarchicalRootPath","_getHierarchicalShowParentLevel","showParentLevel","hierarchicalFacetName","getHierarchicalFacetBreadcrumb","refinement","split","part","trim","toString","JSON","stringify","module","exports"],"sources":["/Users/amandawinkler/Downloads/algolia-instantsearch-react-geo/node_modules/algoliasearch-helper/src/SearchParameters/index.js"],"sourcesContent":["'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar intersection = require('../functions/intersection');\nvar find = require('../functions/find');\nvar valToNumber = require('../functions/valToNumber');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function(el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function(currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n\n  var self = this;\n  Object.keys(params).forEach(function(paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function(partialState) {\n  // Do not reparse numbers in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity'\n  ];\n\n  numberKeys.forEach(function(k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function(value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function(attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function(v) {\n          if (Array.isArray(v)) {\n            return v.map(function(vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge({}, partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function(facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function(currentState, parameters) {\n  var params = parameters || {};\n\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n      'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n      'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n      ' is probably an error, if this is really what you want, you have to first' +\n      ' clear the numeric filters.');\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters}\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      )\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters}\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters}\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters}\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters}\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters}\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters}\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters}\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters}\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters}\n   * @example\n   * // for price = 50 or 40\n   * searchparameter.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * searchparameter.addNumericRefinement('size', '=', 38);\n   * searchparameter.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function(attribute, operator, v) {\n    var value = valToNumber(v);\n\n    if (this.isNumericRefined(attribute, operator, value)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(value);\n    } else {\n      mod[attribute][operator] = [value];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function(facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function(facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters}\n   */\n  removeNumericRefinement: function(attribute, operator, paramValue) {\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function(value, key) {\n        return key === attribute;\n      })\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function(facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function(attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>}\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n\n        operators = operators || {};\n        Object.keys(operators).forEach(function(operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function(value) {\n            var predicateResult = attribute({val: value, op: operator}, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n          operatorList[operator] = outValues;\n        });\n\n        memo[key] = operatorList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters}\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters}\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters}\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters}\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters}\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {\n        return f.name !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters}\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters}\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function(t) {\n        return t !== tag;\n      })\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error('Cannot refine the undeclared facet ' + facet +\n      '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n\n    var mod = {};\n\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 && (\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0] === value ||\n      // remove a parent refinement of the current refinement:\n      //  - refinement was 'beer > IPA > Flying dog'\n      //  - call is toggleRefine('beer > IPA')\n      //  - refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0\n    );\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function(facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function(facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters}\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isDisjunctiveFacet: function(facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean}\n   */\n  isHierarchicalFacet: function(facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isConjunctiveFacet: function(facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean}\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function(facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets());\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function(facet) { return facet.name; }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    );\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]}\n   */\n  getUnrefinedDisjunctiveFacets: function() {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function(f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements'\n  ],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    var self = this;\n    Object.keys(this).forEach(function(paramName) {\n      var paramValue = self[paramName];\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function(acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(\n      function(previous, key) {\n        var isPreviousValueDefined = previous[key] !== undefined;\n        var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n        if (isPreviousValueDefined && !isNextValueDefined) {\n          return omit(previous, [key]);\n        }\n\n        if (isNextValueDefined) {\n          previous[key] = nextWithNumbers[key];\n        }\n\n        return previous;\n      },\n      previousPlainObject\n    );\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function() {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function(hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function(hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function(hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function(hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function(hierarchicalFacetName) {\n    return find(\n      this.hierarchicalFacets,\n      function(f) {\n        return f.name === hierarchicalFacetName;\n      }\n    );\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function(facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function(part) {\n      return part.trim();\n    });\n  },\n\n  toString: function() {\n    return JSON.stringify(this, null, 2);\n  }\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACzC,IAAIC,YAAY,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACvD,IAAIE,YAAY,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AACvD,IAAIG,IAAI,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACvC,IAAII,WAAW,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AACrD,IAAIK,IAAI,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AACvC,IAAIM,aAAa,GAAGN,OAAO,CAAC,4BAA4B,CAAC;AACzD,IAAIO,gBAAgB,GAAGP,OAAO,CAAC,2BAA2B,CAAC;AAE3D,IAAIQ,cAAc,GAAGR,OAAO,CAAC,kBAAkB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,wBAAwBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACtC,IAAIC,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,IAAIE,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,EAAE;IACxC,OACED,CAAC,CAACI,MAAM,KAAKH,CAAC,CAACG,MAAM,IACrBJ,CAAC,CAACK,KAAK,CAAC,UAASC,EAAE,EAAEC,CAAC,EAAE;MACtB,OAAOR,wBAAwB,CAACE,CAAC,CAACM,CAAC,CAAC,EAAED,EAAE,CAAC;IAC3C,CAAC,CAAC;EAEN;EACA,OAAON,CAAC,KAAKC,CAAC;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,SAASA,CAACC,KAAK,EAAEC,aAAa,EAAE;EACvC,OAAOjB,IAAI,CAACgB,KAAK,EAAE,UAASE,YAAY,EAAE;IACxC,OAAOZ,wBAAwB,CAACY,YAAY,EAAED,aAAa,CAAC;EAC9D,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACC,aAAa,EAAE;EACvC,IAAIC,MAAM,GAAGD,aAAa,GAAGD,gBAAgB,CAACG,aAAa,CAACF,aAAa,CAAC,GAAG,CAAC,CAAC;EAE/E,IAAIC,MAAM,CAACE,SAAS,KAAKC,SAAS,IAAI,CAACpB,gBAAgB,CAACiB,MAAM,CAACE,SAAS,CAAC,EAAE;IACzEE,OAAO,CAACC,IAAI,CAAC,iIAAiI,CAAC;EACjJ;EACA;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,MAAM,GAAGN,MAAM,CAACM,MAAM,IAAI,EAAE;EACjC;AACF;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,iBAAiB,GAAGP,MAAM,CAACO,iBAAiB,IAAI,EAAE;EACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAGR,MAAM,CAACQ,kBAAkB,IAAI,EAAE;;EAEzD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,iBAAiB,GAAGT,MAAM,CAACS,iBAAiB,IAAI,CAAC,CAAC;EACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGV,MAAM,CAACU,cAAc,IAAI,CAAC,CAAC;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,4BAA4B,GAAGX,MAAM,CAACW,4BAA4B,IAAI,CAAC,CAAC;EAC7E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,kBAAkB,GAAGZ,MAAM,CAACY,kBAAkB,IAAI,CAAC,CAAC;EACzD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,cAAc,GAAGb,MAAM,CAACa,cAAc,IAAI,EAAE;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"script","externalDependencies":[]}