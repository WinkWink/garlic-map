{"ast":null,"code":"'use strict';\n\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar DerivedHelper = require('./DerivedHelper');\nvar requestBuilder = require('./requestBuilder');\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('./functions/inherits');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar merge = require('./functions/merge');\nvar version = require('./version');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search({\n    onlyWithDerivedHelpers: false\n  });\n  return this;\n};\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\n  this._search({\n    onlyWithDerivedHelpers: true\n  });\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  var self = this;\n  this._currentNbQueries++;\n  this.emit('searchOnce', {\n    state: tempState\n  });\n  if (cb) {\n    this.client.search(queries).then(function (content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n      cb(null, new SearchResults(tempState, content.results), tempState);\n    }).catch(function (err) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) {\n        self.emit('searchQueueEmpty');\n      }\n      cb(err, null, tempState);\n    });\n    return undefined;\n  }\n  return this.client.search(queries).then(function (content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n* Start the search for answers with the parameters set in the state.\n* This method returns a promise.\n* @param {Object} options - the options for answers API call\n* @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n* @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n* @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n*\n* @return {promise} the answer results\n* @deprecated answers is deprecated and will be replaced with new initiatives\n*/\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge({\n    attributesForPrediction: options.attributesForPrediction,\n    nbHits: options.nbHits\n  }, {\n    params: omit(requestBuilder._getHitsSearchParams(derivedState), ['attributesToSnippet', 'hitsPerPage', 'restrictSearchableAttributes', 'snippetEllipsisText' // FIXME remove this line once the engine is fixed.\n    ])\n  });\n\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== 'function') {\n    throw new Error('search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues');\n  }\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n  this._currentNbQueries++;\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([{\n      indexName: state.index,\n      params: algoliaQuery\n    }]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client.search([{\n      type: 'facet',\n      facet: facet,\n      indexName: state.index,\n      params: algoliaQuery\n    }]).then(function processResponse(response) {\n      return response.results[0];\n    });\n  }\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    content = Array.isArray(content) ? content[0] : content;\n    content.facetHits.forEach(function (f) {\n      f.escapedValue = escapeFacetValue(f.value);\n      f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);\n    });\n    return content;\n  }, function (e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function (newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n    conjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n    excludeRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n    disjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n  Object.keys(numericRefinements).forEach(function (operator) {\n    var value = numericRefinements[operator];\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function (options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n    return derivedStateQueries;\n  });\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n  try {\n    this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n  var results = content.results.slice();\n  states.forEach(function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n    helper.emit('result', {\n      results: formattedResponse,\n      state: state\n    });\n  });\n};\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n  this.emit('error', {\n    error: error\n  });\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\nAlgoliaSearchHelper.prototype.containsRefinement = function (query, facetFilters, numericFilters, tagFilters) {\n  return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;\n};\nAlgoliaSearchHelper.prototype._change = function (event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n  if (state !== this.state) {\n    this.state = state;\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\nAlgoliaSearchHelper.prototype.derive = function (fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;","map":{"version":3,"names":["SearchParameters","require","SearchResults","DerivedHelper","requestBuilder","EventEmitter","inherits","objectHasKeys","omit","merge","version","escapeFacetValue","AlgoliaSearchHelper","client","index","options","addAlgoliaAgent","setClient","opts","state","make","lastResults","_queryId","_lastQueryIdReceived","derivedHelpers","_currentNbQueries","prototype","search","_search","onlyWithDerivedHelpers","searchOnlyWithDerivedHelpers","getQuery","_getHitsSearchParams","searchOnce","cb","tempState","setQueryParameters","queries","_getQueries","self","emit","then","content","results","catch","err","undefined","_originalResponse","e","findAnswers","console","warn","derivedHelper","Promise","resolve","derivedState","getModifiedState","data","attributesForPrediction","nbHits","params","errorMessage","initIndex","Error","query","queryLanguages","searchForFacetValues","facet","maxFacetHits","userState","clientHasSFFV","clientHasInitIndex","isDisjunctive","isDisjunctiveFacet","algoliaQuery","getSearchForFacetQuery","searchForFacetValuesPromise","indexName","facetName","type","processResponse","response","addIsRefined","Array","isArray","facetHits","forEach","f","escapedValue","value","isRefined","isDisjunctiveFacetRefined","isFacetRefined","setQuery","q","_change","resetPage","isPageReset","clearRefinements","name","clearTags","addDisjunctiveFacetRefinement","addDisjunctiveRefine","apply","arguments","addHierarchicalFacetRefinement","addNumericRefinement","attribute","operator","addFacetRefinement","addRefine","addFacetExclusion","addExcludeRefinement","addExclude","addTag","tag","addTagRefinement","removeNumericRefinement","removeDisjunctiveFacetRefinement","removeDisjunctiveRefine","removeHierarchicalFacetRefinement","removeFacetRefinement","removeRefine","removeFacetExclusion","removeExcludeRefinement","removeExclude","removeTag","removeTagRefinement","toggleFacetExclusion","toggleExcludeFacetRefinement","toggleExclude","toggleRefinement","toggleFacetRefinement","toggleRefine","toggleTag","toggleTagRefinement","nextPage","page","setPage","previousPage","setCurrentPage","setIndex","setQueryParameter","parameter","setState","newState","overrideStateWithoutTriggeringChangeEvent","hasRefinements","getNumericRefinements","isConjunctiveFacet","isHierarchicalFacet","isHierarchicalFacetRefined","isExcluded","isExcludeRefined","isDisjunctiveRefined","hasTag","isTagRefined","hasTagRefinements","getIndex","getCurrentPage","getPage","getTags","tagRefinements","getRefinements","refinements","conjRefinements","getConjunctiveRefinements","r","push","excludeRefinements","getExcludeRefinements","disjRefinements","getDisjunctiveRefinements","numericRefinements","Object","keys","getNumericRefinement","getHierarchicalFacetBreadcrumb","states","mainQueries","queriesCount","length","helper","derivedQueries","map","derivedStateQueries","concat","queryId","_dispatchAlgoliaResponse","bind","_dispatchAlgoliaError","error","slice","s","specificResults","splice","formattedResponse","containsRefinement","facetFilters","numericFilters","tagFilters","_hasDisjunctiveRefinements","disjunctiveRefinements","event","clearCache","newClient","getClient","derive","fn","detachDerivedHelper","pos","indexOf","hasPendingRequests","module","exports"],"sources":["/Users/amandawinkler/Downloads/algolia-instantsearch-react-geo/node_modules/algoliasearch-helper/src/algoliasearch.helper.js"],"sourcesContent":["'use strict';\n\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar DerivedHelper = require('./DerivedHelper');\nvar requestBuilder = require('./requestBuilder');\n\nvar EventEmitter = require('@algolia/events');\nvar inherits = require('./functions/inherits');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar merge = require('./functions/merge');\n\nvar version = require('./version');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n */\nfunction AlgoliaSearchHelper(client, index, options) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.lastResults = null;\n  this._queryId = 0;\n  this._lastQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper}\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function() {\n  this._search({onlyWithDerivedHelpers: false});\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n  this._search({onlyWithDerivedHelpers: true});\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function() {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [callback] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n  var tempState = !options ? this.state : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function(err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(function(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    return {\n      content: new SearchResults(tempState, content.results),\n      state: tempState,\n      _originalResponse: content\n    };\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n /**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */\nAlgoliaSearchHelper.prototype.findAnswers = function(options) {\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText' // FIXME remove this line once the engine is fixed.\n      ])\n    }\n  );\n\n  var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n\n  this._currentNbQueries++;\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      {indexName: state.index, params: algoliaQuery}\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery\n        }\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query\n  });\n\n  return searchForFacetValuesPromise.then(function addIsRefined(content) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n    content = Array.isArray(content) ? content[0] : content;\n\n    content.facetHits.forEach(function(f) {\n      f.escapedValue = escapeFacetValue(f.value);\n      f.isRefined = isDisjunctive\n        ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n        : state.isFacetRefined(facet, f.escapedValue);\n    });\n\n    return content;\n  }, function(e) {\n    self._currentNbQueries--;\n    if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n    throw e;\n  });\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function(q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function() {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function() {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function() {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n  this._change({\n    state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper}\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function() {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function() {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function() {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper}\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function() {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper}\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function() {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function(name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function(newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper}\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n  this.state = new SearchParameters(newState);\n  return this;\n};\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype.hasTag = function(tag) {\n  return this.state.isTagRefined(tag);\n};\n\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function() {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n\n/**\n * Get the name of the currently used index.\n * @return {string}\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function() {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function() {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive'\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'exclude'\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjRefinements = this.state.getDisjunctiveRefinements(facetName);\n\n    disjRefinements.forEach(function(r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive'\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function(operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric'\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @return {undefined}\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function(options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n  var queryId = this._queryId++;\n\n  this._currentNbQueries++;\n\n  try {\n    this.client.search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error\n    });\n  }\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>}\n *  state state used for to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n  // FIXME remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= (queryId - this._lastQueryIdReceived);\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n\n  states.forEach(function(s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);\n\n    helper.emit('result', {\n      results: formattedResponse,\n      state: state\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n  return query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0;\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean}\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n  return this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0;\n};\n\nAlgoliaSearchHelper.prototype._change = function(event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.clearCache = function() {\n  this.client.clearCache && this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper}\n */\nAlgoliaSearchHelper.prototype.setClient = function(newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch}\n */\nAlgoliaSearchHelper.prototype.getClient = function() {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @return {DerivedHelper}\n */\nAlgoliaSearchHelper.prototype.derive = function(fn) {\n  var derivedHelper = new DerivedHelper(this, fn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @return {undefined}\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n"],"mappings":"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CAACsI,gBAAgB,CAACtF,KAAK,EAAEsB,KAAK,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA7E,mBAAmB,CAACc,SAAS,CAACgI,oBAAoB,GAAG,UAASvF,KAAK,EAAEsB,KAAK,EAAE;EAC1E,OAAO,IAAI,CAACtE,KAAK,CAACwE,yBAAyB,CAACxB,KAAK,EAAEsB,KAAK,CAAC;AAC3D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA7E,mBAAmB,CAACc,SAAS,CAACiI,MAAM,GAAG,UAASxC,GAAG,EAAE;EACnD,OAAO,IAAI,CAAChG,KAAK,CAACyI,YAAY,CAACzC,GAAG,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACAvG,mBAAmB,CAACc,SAAS,CAACkI,YAAY,GAAG,YAAW;EACtD,OAAO,IAAI,CAACC,iBAAiB,CAACtD,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AACtD,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA5F,mBAAmB,CAACc,SAAS,CAACoI,QAAQ,GAAG,YAAW;EAClD,OAAO,IAAI,CAAC3I,KAAK,CAACL,KAAK;AACzB,CAAC;AAED,SAASiJ,cAAcA,CAAA,EAAG;EACxB,OAAO,IAAI,CAAC5I,KAAK,CAACsH,IAAI;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA7H,mBAAmB,CAACc,SAAS,CAACqI,cAAc,GAAGA,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACAnJ,mBAAmB,CAACc,SAAS,CAACsI,OAAO,GAAGD,cAAc;;AAEtD;AACA;AACA;AACA;AACA;AACAnJ,mBAAmB,CAACc,SAAS,CAACuI,OAAO,GAAG,YAAW;EACjD,OAAO,IAAI,CAAC9I,KAAK,CAAC+I,cAAc;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtJ,mBAAmB,CAACc,SAAS,CAACyI,cAAc,GAAG,UAASrF,SAAS,EAAE;EACjE,IAAIsF,WAAW,GAAG,EAAE;EAEpB,IAAI,IAAI,CAACjJ,KAAK,CAACkI,kBAAkB,CAACvE,SAAS,CAAC,EAAE;IAC5C,IAAIuF,eAAe,GAAG,IAAI,CAAClJ,KAAK,CAACmJ,yBAAyB,CAACxF,SAAS,CAAC;IAErEuF,eAAe,CAAC/E,OAAO,CAAC,UAASiF,CAAC,EAAE;MAClCH,WAAW,CAACI,IAAI,CAAC;QACf/E,KAAK,EAAE8E,CAAC;QACRxF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI0F,kBAAkB,GAAG,IAAI,CAACtJ,KAAK,CAACuJ,qBAAqB,CAAC5F,SAAS,CAAC;IAEpE2F,kBAAkB,CAACnF,OAAO,CAAC,UAASiF,CAAC,EAAE;MACrCH,WAAW,CAACI,IAAI,CAAC;QACf/E,KAAK,EAAE8E,CAAC;QACRxF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,IAAI,CAAC5D,KAAK,CAACsD,kBAAkB,CAACK,SAAS,CAAC,EAAE;IACnD,IAAI6F,eAAe,GAAG,IAAI,CAACxJ,KAAK,CAACyJ,yBAAyB,CAAC9F,SAAS,CAAC;IAErE6F,eAAe,CAACrF,OAAO,CAAC,UAASiF,CAAC,EAAE;MAClCH,WAAW,CAACI,IAAI,CAAC;QACf/E,KAAK,EAAE8E,CAAC;QACRxF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,IAAI8F,kBAAkB,GAAG,IAAI,CAAC1J,KAAK,CAACiI,qBAAqB,CAACtE,SAAS,CAAC;EAEpEgG,MAAM,CAACC,IAAI,CAACF,kBAAkB,CAAC,CAACvF,OAAO,CAAC,UAASsB,QAAQ,EAAE;IACzD,IAAInB,KAAK,GAAGoF,kBAAkB,CAACjE,QAAQ,CAAC;IAExCwD,WAAW,CAACI,IAAI,CAAC;MACf/E,KAAK,EAAEA,KAAK;MACZmB,QAAQ,EAAEA,QAAQ;MAClB7B,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOqF,WAAW;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAxJ,mBAAmB,CAACc,SAAS,CAACsJ,oBAAoB,GAAG,UAASrE,SAAS,EAAEC,QAAQ,EAAE;EACjF,OAAO,IAAI,CAACzF,KAAK,CAAC6J,oBAAoB,CAACrE,SAAS,EAAEC,QAAQ,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhG,mBAAmB,CAACc,SAAS,CAACuJ,8BAA8B,GAAG,UAASnG,SAAS,EAAE;EACjF,OAAO,IAAI,CAAC3D,KAAK,CAAC8J,8BAA8B,CAACnG,SAAS,CAAC;AAC7D,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlE,mBAAmB,CAACc,SAAS,CAACE,OAAO,GAAG,UAASb,OAAO,EAAE;EACxD,IAAII,KAAK,GAAG,IAAI,CAACA,KAAK;EACtB,IAAI+J,MAAM,GAAG,EAAE;EACf,IAAIC,WAAW,GAAG,EAAE;EAEpB,IAAI,CAACpK,OAAO,CAACc,sBAAsB,EAAE;IACnCsJ,WAAW,GAAG/K,cAAc,CAACkC,WAAW,CAACnB,KAAK,CAACL,KAAK,EAAEK,KAAK,CAAC;IAE5D+J,MAAM,CAACV,IAAI,CAAC;MACVrJ,KAAK,EAAEA,KAAK;MACZiK,YAAY,EAAED,WAAW,CAACE,MAAM;MAChCC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAAC9I,IAAI,CAAC,QAAQ,EAAE;MAClBrB,KAAK,EAAEA,KAAK;MACZwB,OAAO,EAAE,IAAI,CAACtB;IAChB,CAAC,CAAC;EACJ;EAEA,IAAIkK,cAAc,GAAG,IAAI,CAAC/J,cAAc,CAACgK,GAAG,CAAC,UAASpI,aAAa,EAAE;IACnE,IAAIG,YAAY,GAAGH,aAAa,CAACI,gBAAgB,CAACrC,KAAK,CAAC;IACxD,IAAIsK,mBAAmB,GAAGrL,cAAc,CAACkC,WAAW,CAACiB,YAAY,CAACzC,KAAK,EAAEyC,YAAY,CAAC;IAEtF2H,MAAM,CAACV,IAAI,CAAC;MACVrJ,KAAK,EAAEoC,YAAY;MACnB6H,YAAY,EAAEK,mBAAmB,CAACJ,MAAM;MACxCC,MAAM,EAAElI;IACV,CAAC,CAAC;IAEFA,aAAa,CAACZ,IAAI,CAAC,QAAQ,EAAE;MAC3BrB,KAAK,EAAEoC,YAAY;MACnBZ,OAAO,EAAES,aAAa,CAAC/B;IACzB,CAAC,CAAC;IAEF,OAAOoK,mBAAmB;EAC5B,CAAC,CAAC;EAEF,IAAIpJ,OAAO,GAAG8C,KAAK,CAACzD,SAAS,CAACgK,MAAM,CAACnF,KAAK,CAAC4E,WAAW,EAAEI,cAAc,CAAC;EACvE,IAAII,OAAO,GAAG,IAAI,CAACrK,QAAQ,EAAE;EAE7B,IAAI,CAACG,iBAAiB,EAAE;EAExB,IAAI;IACF,IAAI,CAACZ,MAAM,CAACc,MAAM,CAACU,OAAO,CAAC,CACxBI,IAAI,CAAC,IAAI,CAACmJ,wBAAwB,CAACC,IAAI,CAAC,IAAI,EAAEX,MAAM,EAAES,OAAO,CAAC,CAAC,CAC/D/I,KAAK,CAAC,IAAI,CAACkJ,qBAAqB,CAACD,IAAI,CAAC,IAAI,EAAEF,OAAO,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACA,IAAI,CAACvJ,IAAI,CAAC,OAAO,EAAE;MACjBuJ,KAAK,EAAEA;IACT,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnL,mBAAmB,CAACc,SAAS,CAACkK,wBAAwB,GAAG,UAASV,MAAM,EAAES,OAAO,EAAEjJ,OAAO,EAAE;EAC1F;;EAEA,IAAIiJ,OAAO,GAAG,IAAI,CAACpK,oBAAoB,EAAE;IACvC;IACA;EACF;EAEA,IAAI,CAACE,iBAAiB,IAAKkK,OAAO,GAAG,IAAI,CAACpK,oBAAqB;EAC/D,IAAI,CAACA,oBAAoB,GAAGoK,OAAO;EAEnC,IAAI,IAAI,CAAClK,iBAAiB,KAAK,CAAC,EAAE,IAAI,CAACe,IAAI,CAAC,kBAAkB,CAAC;EAE/D,IAAIG,OAAO,GAAGD,OAAO,CAACC,OAAO,CAACqJ,KAAK,EAAE;EAErCd,MAAM,CAAC5F,OAAO,CAAC,UAAS2G,CAAC,EAAE;IACzB,IAAI9K,KAAK,GAAG8K,CAAC,CAAC9K,KAAK;IACnB,IAAIiK,YAAY,GAAGa,CAAC,CAACb,YAAY;IACjC,IAAIE,MAAM,GAAGW,CAAC,CAACX,MAAM;IACrB,IAAIY,eAAe,GAAGvJ,OAAO,CAACwJ,MAAM,CAAC,CAAC,EAAEf,YAAY,CAAC;IAErD,IAAIgB,iBAAiB,GAAGd,MAAM,CAACjK,WAAW,GAAG,IAAInB,aAAa,CAACiB,KAAK,EAAE+K,eAAe,CAAC;IAEtFZ,MAAM,CAAC9I,IAAI,CAAC,QAAQ,EAAE;MACpBG,OAAO,EAAEyJ,iBAAiB;MAC1BjL,KAAK,EAAEA;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAEDP,mBAAmB,CAACc,SAAS,CAACoK,qBAAqB,GAAG,UAASH,OAAO,EAAEI,KAAK,EAAE;EAC7E,IAAIJ,OAAO,GAAG,IAAI,CAACpK,oBAAoB,EAAE;IACvC;IACA;EACF;EAEA,IAAI,CAACE,iBAAiB,IAAIkK,OAAO,GAAG,IAAI,CAACpK,oBAAoB;EAC7D,IAAI,CAACA,oBAAoB,GAAGoK,OAAO;EAEnC,IAAI,CAACnJ,IAAI,CAAC,OAAO,EAAE;IACjBuJ,KAAK,EAAEA;EACT,CAAC,CAAC;EAEF,IAAI,IAAI,CAACtK,iBAAiB,KAAK,CAAC,EAAE,IAAI,CAACe,IAAI,CAAC,kBAAkB,CAAC;AACjE,CAAC;AAED5B,mBAAmB,CAACc,SAAS,CAAC2K,kBAAkB,GAAG,UAASrI,KAAK,EAAEsI,YAAY,EAAEC,cAAc,EAAEC,UAAU,EAAE;EAC3G,OAAOxI,KAAK,IACVsI,YAAY,CAACjB,MAAM,KAAK,CAAC,IACzBkB,cAAc,CAAClB,MAAM,KAAK,CAAC,IAC3BmB,UAAU,CAACnB,MAAM,KAAK,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAzK,mBAAmB,CAACc,SAAS,CAAC+K,0BAA0B,GAAG,UAAStI,KAAK,EAAE;EACzE,OAAO,IAAI,CAAChD,KAAK,CAACuL,sBAAsB,CAACvI,KAAK,CAAC,IAC7C,IAAI,CAAChD,KAAK,CAACuL,sBAAsB,CAACvI,KAAK,CAAC,CAACkH,MAAM,GAAG,CAAC;AACvD,CAAC;AAEDzK,mBAAmB,CAACc,SAAS,CAACqE,OAAO,GAAG,UAAS4G,KAAK,EAAE;EACtD,IAAIxL,KAAK,GAAGwL,KAAK,CAACxL,KAAK;EACvB,IAAI8E,WAAW,GAAG0G,KAAK,CAAC1G,WAAW;EAEnC,IAAI9E,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;IACxB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACqB,IAAI,CAAC,QAAQ,EAAE;MAClBrB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBwB,OAAO,EAAE,IAAI,CAACtB,WAAW;MACzB4E,WAAW,EAAEA;IACf,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACArF,mBAAmB,CAACc,SAAS,CAACkL,UAAU,GAAG,YAAW;EACpD,IAAI,CAAC/L,MAAM,CAAC+L,UAAU,IAAI,IAAI,CAAC/L,MAAM,CAAC+L,UAAU,EAAE;EAClD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAhM,mBAAmB,CAACc,SAAS,CAACT,SAAS,GAAG,UAAS4L,SAAS,EAAE;EAC5D,IAAI,IAAI,CAAChM,MAAM,KAAKgM,SAAS,EAAE,OAAO,IAAI;EAE1C,IAAI,OAAOA,SAAS,CAAC7L,eAAe,KAAK,UAAU,EAAE;IACnD6L,SAAS,CAAC7L,eAAe,CAAC,aAAa,GAAGN,OAAO,GAAG,GAAG,CAAC;EAC1D;EACA,IAAI,CAACG,MAAM,GAAGgM,SAAS;EAEvB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACAjM,mBAAmB,CAACc,SAAS,CAACoL,SAAS,GAAG,YAAW;EACnD,OAAO,IAAI,CAACjM,MAAM;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,mBAAmB,CAACc,SAAS,CAACqL,MAAM,GAAG,UAASC,EAAE,EAAE;EAClD,IAAI5J,aAAa,GAAG,IAAIjD,aAAa,CAAC,IAAI,EAAE6M,EAAE,CAAC;EAC/C,IAAI,CAACxL,cAAc,CAACgJ,IAAI,CAACpH,aAAa,CAAC;EACvC,OAAOA,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAxC,mBAAmB,CAACc,SAAS,CAACuL,mBAAmB,GAAG,UAAS7J,aAAa,EAAE;EAC1E,IAAI8J,GAAG,GAAG,IAAI,CAAC1L,cAAc,CAAC2L,OAAO,CAAC/J,aAAa,CAAC;EACpD,IAAI8J,GAAG,KAAK,CAAC,CAAC,EAAE,MAAM,IAAInJ,KAAK,CAAC,iCAAiC,CAAC;EAClE,IAAI,CAACvC,cAAc,CAAC2K,MAAM,CAACe,GAAG,EAAE,CAAC,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACAtM,mBAAmB,CAACc,SAAS,CAAC0L,kBAAkB,GAAG,YAAW;EAC5D,OAAO,IAAI,CAAC3L,iBAAiB,GAAG,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA4L,MAAM,CAACC,OAAO,GAAG1M,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}